<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Work with Data - NEON Education</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2015-03-25T22:48:26-06:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>NEON EDUCATION</name>
  <uri>http://localhost:4000/</uri>
  <email>lwasser@neoninc.org</email>
</author>


<entry>
  <title type="html"><![CDATA[Cheat sheets for R and Python, At Your Service.]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/R-Python/Cheatsheets/" />
  <id>http://localhost:4000/R-Python/R-and-Python-Cheatsheets</id>
  <published>2015-03-20T11:49:52-06:00</published>
  <updated>2015-03-20T11:49:52-06:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#coding-cheatsheets&quot;&gt;Coding Cheatsheets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cheatsheets-for-r&quot;&gt;Cheatsheets for R&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cheatsheets-for-python&quot;&gt;Cheatsheets for Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;h1 id=&quot;coding-cheatsheets&quot;&gt;Coding Cheatsheets&lt;/h1&gt;
&lt;p&gt;I’ll admit it, i’m a huge fan of cheat sheets. I am often jumping between programs and languages and it’s insanely easy to get syntax mixed up. A running list is below. If you have others, share them in the comments below and i’ll add them to the list! Cheers!
~Leah&lt;/p&gt;

&lt;h1 id=&quot;cheatsheets-for-r&quot;&gt;Cheatsheets for R&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;This is a nice &lt;a href=&quot;http://flowingdata.com/2015/03/17/r-cheat-sheet-for-graphical-parameters/&quot; target=&quot;_blank&quot;&gt; cheatsheet for figures in R. Thanks to @flowingdata on twitter.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rstudio has developed  &lt;a href=&quot;http://www.rstudio.com/resources/cheatsheets/?utm_content=buffer756d6&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer/&quot; target=&quot;_blank&quot;&gt;a series of cheat sheets&lt;/a&gt; that are pretty nice. My favorite is the data wrangling one!&lt;/li&gt;
  &lt;li&gt;Nic Webber shared this &lt;a href=&quot;http://www.rstudio.com/resources/cheatsheets/?utm_content=buffer756d6&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer/&quot; target=&quot;_blank&quot;&gt;R-Python-Matlab cheat sheet&lt;/a&gt;. This one is great if you’re like me and constantly jumping between programs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cheatsheets-for-python&quot;&gt;Cheatsheets for Python&lt;/h1&gt;
&lt;p&gt;oh, how sad. I haven’t discovered any as of yet. &lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/R-Python/Cheatsheets/&quot;&gt;Cheat sheets for R and Python, At Your Service.&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on March 20, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[R, Python, Matlab Cheatsheet]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/cheatsheet/R-Python-Matlab" />
  <id>http://localhost:4000/cheatsheet/cheatsheet2</id>
  <published>2015-01-31T13:49:52-07:00</published>
  <updated>2015-01-31T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/cheatsheet/R-Python-Matlab&quot;&gt;R, Python, Matlab Cheatsheet&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 31, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Here's Two cheatsheet?]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/cheatsheet/About" />
  <id>http://localhost:4000/cheatsheet/cheatsheet copy 4</id>
  <published>2015-01-31T13:49:52-07:00</published>
  <updated>2015-01-31T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;p&gt;more here…&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/cheatsheet/About&quot;&gt;Here's Two cheatsheet?&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 31, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Here's Two cheatsheet?]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/cheatsheet/About" />
  <id>http://localhost:4000/cheatsheet/cheatsheet copy 3</id>
  <published>2015-01-31T13:49:52-07:00</published>
  <updated>2015-01-31T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;p&gt;more here…&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/cheatsheet/About&quot;&gt;Here's Two cheatsheet?&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 31, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Here's Two cheatsheet?]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/cheatsheet/About" />
  <id>http://localhost:4000/cheatsheet/cheatsheet copy 2</id>
  <published>2015-01-31T13:49:52-07:00</published>
  <updated>2015-01-31T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;p&gt;more here…&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/cheatsheet/About&quot;&gt;Here's Two cheatsheet?&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 31, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[R Studio Cheatsheets - Data Wrangling]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/cheatsheet/R-Data-Wrangling-Cheatsheet" />
  <id>http://localhost:4000/cheatsheet/cheatsheet copy</id>
  <published>2015-01-31T13:49:52-07:00</published>
  <updated>2015-01-31T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/cheatsheet/R-Data-Wrangling-Cheatsheet&quot;&gt;R Studio Cheatsheets - Data Wrangling&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 31, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Figure Cheatsheet for R]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/cheatsheet/R-Figures" />
  <id>http://localhost:4000/cheatsheet/cheatsheet</id>
  <published>2015-01-31T13:49:52-07:00</published>
  <updated>2015-01-31T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/cheatsheet/R-Figures&quot;&gt;Figure Cheatsheet for R&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 31, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[About: Hierarchical Data Formats - What is HDF5?]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/HDF5/About" />
  <id>http://localhost:4000/HDF5/About-Hierarchical-Data-Format-HDF5</id>
  <published>2015-01-31T13:49:52-07:00</published>
  <updated>2015-01-31T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#about-hierarchical-data-formats---hdf5&quot;&gt;About Hierarchical Data Formats - HDF5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hierarchical-structure---a-file-directory-within-a-file&quot;&gt;Hierarchical Structure - A file directory within a file&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hdf5-is-a-self-describing-format&quot;&gt;HDF5 is a Self Describing Format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#compressed--efficient-subsetting&quot;&gt;Compressed &amp;amp; Efficient subsetting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#heterogeneous-data-storage&quot;&gt;Heterogeneous Data Storage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#open-format&quot;&gt;Open Format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary-points---benefits-of-hdf5&quot;&gt;Summary Points - Benefits of HDF5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#additional-resources-about-hdf5&quot;&gt;Additional Resources About HDF5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;div id=&quot;objectives&quot;&gt;

&lt;h3&gt;Goals / Objectives&lt;/h3&gt;
After completing this activity, you will:
&lt;ol&gt;
&lt;li&gt;Understand what the Hierarchical Data Format (HDF5) is.&lt;/li&gt;
&lt;li&gt;Understand the key benefits of the HDF5 format, particularly related to big data. &lt;/li&gt;
&lt;li&gt;Understand both the types of data that can be stored in HDF5 and how it can be stored / structured.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What You&#39;ll Need&lt;/h3&gt;
&lt;p&gt;Internet access and a working thinking cap.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&quot;about-hierarchical-data-formats---hdf5&quot;&gt;About Hierarchical Data Formats - HDF5&lt;/h2&gt;

&lt;p&gt;The Hierarchical Data Format version 5 (HDF5), is an open source file format that supports large, complex, heterogeneous data. HDF5 uses a “file directory” like structure that allows you to organize data within the file in many different structured ways as you might do with files on your computer. The HDF5 format also allows for embedding of metadata making it &lt;em&gt;self-describing&lt;/em&gt;. &lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip:&lt;/strong&gt; HDF5 is one hierarchical data format, that builds upon both HDF4 and NetCDF (two other hierarchical data formats). &lt;a href=&quot;http://www.hdfgroup.org/why_hdf/&quot; target=&quot;_blank&quot;&gt; Read  more about HDF5 Here.&lt;/a&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/whyHDF5.jpg&quot;&gt;&lt;img src=&quot;/images/whyHDF5.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Why Use HDF5. Image Source: http://www.hdfgroup.org/why_hdf/&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;hierarchical-structure---a-file-directory-within-a-file&quot;&gt;Hierarchical Structure - A file directory within a file&lt;/h2&gt;

&lt;p&gt;The HDF5 format can  be thought of as a file system contained and described within one single file. Think about the files and folders stored on your computer. You might have a data directory with some temperature data for multiple field sites. This temperature data is collected every minute and summarized on an hourly, daily and weekly basis. Within &lt;strong&gt;ONE&lt;/strong&gt; HDF5 file, you can store a similar set of data organized in the same way that you might organize files and folders on your computer. However in a HDF5 file, what we call “directories” or “folders” on our computers, are called &lt;code&gt;groups&lt;/code&gt; and what we call files on our computer are called &lt;code&gt;datasets&lt;/code&gt;. &lt;/p&gt;

&lt;h3 id=&quot;important-hdf5-terms&quot;&gt;2 Important HDF5 Terms&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Group:&lt;/strong&gt; A folder like element within an HDF5 file that might contain other groups OR datasets within it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dataset:&lt;/strong&gt; The actual data contained within the HDF5 file. Datasets are often (but don’t have to be) stored within groups in the file.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/HDf5/hdf5_structure4.jpg&quot;&gt;&lt;img src=&quot;/images/HDf5/hdf5_structure4.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;An example HDF file structure which contains groups, datasets and associated metadata.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;An HDF5 file containing data, might be structured like this:  &lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/HDf5/hdf5_structure3.jpg&quot;&gt;&lt;img src=&quot;/images/HDf5/hdf5_structure3.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;An example HDF5 file structure containing data for multiple field sites and also containing various datasets (averaged at different time intervals).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;hdf5-is-a-self-describing-format&quot;&gt;HDF5 is a Self Describing Format&lt;/h2&gt;

&lt;p&gt;HDF5 format is self describing. This means that each file, group and dataset can have associated metadata that describes exactly what the data are. Following the example above, we can embed information about each site to the file such as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The full name and X,Y location of the site&lt;/li&gt;
  &lt;li&gt;Description of the site&lt;/li&gt;
  &lt;li&gt;Another other documentation of interest.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similarly, we might add information describing the sensor used to collect the temperature data. We can attach information about both how the averaging was performed to each dataset within the site group and to describe the time period for which data are available. &lt;/p&gt;

&lt;p&gt;One key benefit of metadata attached to each file, group and dataset, is that it facilitates automation without needing an additional metadata document. Using a programming language, like &lt;code&gt;R&lt;/code&gt; or &lt;code&gt;Python&lt;/code&gt;, we can grab information from the metadata that we might need to process the data.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/HDf5/hdf5_structure4.jpg&quot;&gt;&lt;img src=&quot;/images/HDf5/hdf5_structure2.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;HDF5 files are self describing - this means that all elements (the file itself, groups and datasets) can have associated metadata that describes the information contained within the element.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;compressed--efficient-subsetting&quot;&gt;Compressed &amp;amp; Efficient subsetting&lt;/h2&gt;
&lt;p&gt;The HDF5 format is a compressed format. The size of all data contained within HDF5 is optimized which makes the overall file size smaller. However, HDF5 files, even when compressed can be quite large given they often contain big data. Another powerful attribute of HDF5 is &lt;code&gt;data slicing&lt;/code&gt;. Data slicing refers to extracting particular subsets of a dataset stored within the HDF5 file. This means that the entire dataset doesn’t have to be read into memory (RAM). It allows us to more efficiently work with very large (gigabytes or more) datasets. &lt;/p&gt;

&lt;h2 id=&quot;heterogeneous-data-storage&quot;&gt;Heterogeneous Data Storage&lt;/h2&gt;
&lt;p&gt;HDF5 files can store many different types of data within in the same file. For example, one group may contain a set of datasets to contain integer (numeric) and text (string) formatted data. One dataset can also contain heterogeneous information (combining text and numeric data). This means that HDF5 can store any of the following (and more) in one file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Temperature, precipitation and PAR (photosynthetic active radiation) data for a site or for many sites &lt;/li&gt;
  &lt;li&gt;A set of images that cover one or more areas (each image can have specific spatial information associated with it - all in the same file)&lt;/li&gt;
  &lt;li&gt;A multi or hyperspectral spatial dataset that contains thousands of bands.&lt;/li&gt;
  &lt;li&gt;Field data for several sites characterizing insects, mammals, vegetation and climate.&lt;/li&gt;
  &lt;li&gt;And more much!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-format&quot;&gt;Open Format&lt;/h2&gt;
&lt;p&gt;The HDF5 format is open and free to use. The supporting libraries (and a free viewer), can be downloaded from the &lt;a href=&quot;http://www.hdfgroup.org&quot; target=&quot;_blank&quot;&gt;HDF Group &lt;/a&gt; website.  As such, it has wide support in a host of programs including open source programming languages like &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;Python&lt;/code&gt;, commercial programming tools like &lt;code&gt;Matlab&lt;/code&gt; and &lt;code&gt;IDL&lt;/code&gt;. Spatial data, stored in HDF5 format can be used in GIS and imaging programs including &lt;code&gt;QGIS&lt;/code&gt;, &lt;code&gt;ArcGIS&lt;/code&gt;, and &lt;code&gt;ENVI&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary-points---benefits-of-hdf5&quot;&gt;Summary Points - Benefits of HDF5&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Self-Describing&lt;/strong&gt; The data with an HDF5 file are self describing. This allows us to efficiently extract metadata without needing an additional metadata document.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Supporta Heterogeneous Data&lt;/strong&gt;: Different types of data can be contained within one HDF5 file. &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Supports Large, Complex Data&lt;/strong&gt;: HDF5 is a compressed format that is designed to support  large, heterogeneous, and complex datasets. &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Supports Data Slicing:&lt;/strong&gt; “Data slicing” or extracting portions of the dataset as needed to be used in analysis means large files don’t need to be completely read into the computers memory or RAM.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Open Format -  wide support in the many tools&lt;/strong&gt;: Because the HDF5 format is open, it is supported by a host of programming languages and tools including open source languages like &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;Python&lt;/code&gt; and open GIS tools like &lt;code&gt;QGIS&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll see what this looks like when &lt;a href=&quot;/HDF5/Exploring-Data-HDFView/&quot;&gt;we open an HDF5 file in the HDFviewer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;additional-resources-about-hdf5&quot;&gt;Additional Resources About HDF5&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/documents/HDF5-Intro.pdf&quot;&gt;About HDF5 - Presentation from the HDF5 Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/HDF5/About&quot;&gt;About: Hierarchical Data Formats - What is HDF5?&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 31, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[HDFView: Exploring HDF5 Files in the Free HDFview Tool]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/HDF5/Exploring-Data-HDFView" />
  <id>http://localhost:4000/HDF5/Activity-HDFView-HDF5</id>
  <published>2015-01-30T13:49:52-07:00</published>
  <updated>2015-01-30T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#review-hierarchical-data-format-5---hdf5&quot;&gt;Review: Hierarchical Data Format 5 - HDF5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#about-this-activity--&quot;&gt;About This Activity -&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#part-1-exploring-temperature-data-in-hdf5-format-in-hdfview&quot;&gt;Part 1. Exploring Temperature Data in HDF5 Format in HDFView&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#part-2-exploring-hyperspectral-imagery-stored-in-hdf5&quot;&gt;Part 2. Exploring Hyperspectral Imagery stored in HDF5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;div id=&quot;objectives&quot;&gt;
&lt;h3&gt;Learning Goals&lt;/h3&gt;
After completing this activity, you will:
&lt;ol&gt;
&lt;li&gt;Understand how data can be structured and stored in HDF5.&lt;/li&gt;
&lt;li&gt;Understand how metadata can be added to an HDF5 file, making it &quot;self describing&quot;&lt;/li&gt;
&lt;li&gt;Know how to explore HDF5 files using the free HDF Viewer&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What you&#39;ll Need&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Install the [free HDFview application](http://www.hdfgroup.org/products/java/hdfview/). This application will allow you to explore the contents of an HDF5 file easily. &lt;a href=&quot;http://www.hdfgroup.org/products/java/release/download.html&quot; target=&quot;_blank&quot;&gt;Click HERE to go to the download page. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data: &lt;a href=&quot;/data/NEON_TowerDataD3_D10.hdf5&quot; class=&quot;btn&quot;&gt;Download the National Ecological Observatory Network (NEON) Flux Tower Temperature data HERE.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Download the &lt;a href=&quot;http://neonhighered.org/Data/HDF5/SJER_140123_chip.h5&quot;&gt;NEON Airborne Observation Platform Spectrometer Data HDF5 File.&lt;/a&gt; NOTE that this second file has an &quot;.h5&quot; extension while the first has an HDF5 extension. Both extensions represent the HDF5 data type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;about-installing-hdfview&quot;&gt;About Installing HDFView&lt;/h3&gt;
&lt;p&gt;Select the HDFView download option that matches the operating system and computer setup (32 bit vs 64 bit) that you have. Also &lt;em&gt;don’t&lt;/em&gt; click on the “(MDF)” link. Click on the operating system name (ie Windows or Mac for java 1.7).&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/HDF5View_Install.png&quot;&gt;
    &lt;img src=&quot;/images/HDF5View_Install.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;HDFview download options. Click on the operating system name (not the MDF link) to access install files.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;review-hierarchical-data-format-5---hdf5&quot;&gt;Review: Hierarchical Data Format 5 - HDF5&lt;/h2&gt;

&lt;p&gt;We learned previously that the Hierarchical Data Format version 5 (HDF5), is an open file format that supports large, complex, heterogeneous data. Some key points about HDF5:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HDF5 uses a “file directory” like structure. The HDF5 data models organizes information using &lt;code&gt;Groups&lt;/code&gt;. Each group may contain one or more &lt;code&gt;datasets&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;HDF5 is a self describing file format. This means that the metadata for the data contained within the HDF5 file, are built into the file itself.&lt;/li&gt;
  &lt;li&gt;One HDF5 file may contain several heterogeneous data types (e.g. images, numeric data, data stored as strings) &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;about-this-activity--&quot;&gt;About This Activity -&lt;/h2&gt;
&lt;p&gt;In this activity, we will explore two different types of data, saved in HDF5. This will allow us to better understand how one file can store multiple different types of data, in different ways.&lt;/p&gt;

&lt;h1 id=&quot;part-1-exploring-temperature-data-in-hdf5-format-in-hdfview&quot;&gt;Part 1. Exploring Temperature Data in HDF5 Format in HDFView&lt;/h1&gt;

&lt;p&gt;The first thing that we will do is open an HDF5 file in the viewer to get a better idea of how HDF5 files can be structured.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To begin, open the HDFView application.&lt;/li&gt;
  &lt;li&gt;Within the HDFView application, select File –&amp;gt; Open and navigate to the folder where you saved the fiuTestFile.hdf5 file on your computer. Open this file in HDFView.&lt;/li&gt;
  &lt;li&gt;If you click on the NAME of the HDF5 file in the left hand window of HDFView, you can view metadata for the file (located in the bottom window of the application).&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/HDf5/OpenFIU.png&quot;&gt;&lt;img src=&quot;/images/HDf5/OpenFIU.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;If you click on the file name wtihin the viewer, you can view any stored metadata for that file, at the bottom of the viewer. (you may have to click on the metadata tab at the bottom of the viewer)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Next, explore the structure of this file. Notice that there are two Groups (represented as folder icons in the viewer) called “Domain_03” and “Domain_10”. Within each domain group, there site groups (NEON sites that are located within those domains). Expand these folders by double clicking on the folder icons. Double clicking “expands” the groups content just as you might expand a folder in windows explorer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that there is metadata associated with each group.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Double click on the “ORD” group located within the Domain_03 group. Notice in the metadata window that Ord contains data collected from the &lt;a href=&quot;http://neoninc.org/science-design/field-sites/ordway-swisher-biological-station&quot; target=&quot;_blank&quot;&gt;NEON Ordway-Swisher Biological Station Field Site&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within the Ord group there are two more groups - Min_1 and Min_30. What data are contained within these groups? &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Expand the “min_1” group wtihin the Ord site in Domain_03. Notice that there are 5 more nested groups named “Boom_1, 2, etc”. A boom refers to an arm that contains sensors, at a particular height on the tower. In this case, we are working with data collected using temperature sensors, mounted on the tower booms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Note:&lt;/strong&gt; The data used in this activity were collected by a temperature sensor mounted on a National Ecological Observatory Network (NEON) “flux tower”. 
&lt;a href=&quot;http://neoninc.org/science-design/collection-methods/flux-tower-measurements&quot; target=&quot;_blank&quot;&gt;Read more about NEON towers, here. &lt;/a&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/NEONtower.png&quot;&gt;&lt;img src=&quot;/images/NEONtower.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;A NEON tower contains booms or arms that house sensors at varying heights along the tower.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Speaking of temperature - what type of sensor is collected the data within the boom_1 folder at the Ordway Swisher site? &lt;em&gt;HINT: check the metadata for that dataset.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Expand the “Boom_1” folder by double clicking it. Finally, we have arrived at a dataset! Have a look at the metadata associated with the temperature dataset within the boom_1 group. Notice that there is metadata describing each attribute in the temperature dataset. &lt;/li&gt;
  &lt;li&gt;Double click on the group name to open up the table in a tabular format. Notice that these data are temporal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this is one example of how an hdf5 file could be structured. This particular file contains data from multiple sites, collected from different sensors (from different booms on the tower) and collected over time. Take some time to explore this HDF5 dataset within the HDF viewer. &lt;/p&gt;

&lt;p&gt;Next, we will look at a spatial data stored in HDF5 format.&lt;/p&gt;

&lt;h1 id=&quot;part-2-exploring-hyperspectral-imagery-stored-in-hdf5&quot;&gt;Part 2. Exploring Hyperspectral Imagery stored in HDF5&lt;/h1&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/aop_0.jpg&quot;&gt;&lt;img src=&quot;/images/aop_0.jpg&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;NEON airborne observation platform.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Next, we will explore a hyperspectral dataset, collected by the &lt;a href=&quot;http://neoninc.org/science-design/collection-methods/airborne-remote-sensing&quot;&gt;NEON Airborne Observation Platform (AOP)&lt;/a&gt; and saved in HDF5 format. Hyperspectral data are naturally hierarchical as each pixel in the data set contains reflectance values for hundreds of bands collected by the sensor. The NEON sensor (imaging spectrometer) collected data within 428 bands.&lt;/p&gt;

&lt;p&gt;A few notes about hyperspectral imagery:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An imaging spectrometer, which collects hyperspectral imagery, records light energy reflected off objects on the earth’s surface.&lt;/li&gt;
  &lt;li&gt;The data are inherently spatial. Each “pixel” in the image is located spatially and represents an area of ground on the earth.&lt;/li&gt;
  &lt;li&gt;Similar to an R,G,B camera, an imaging spectrometer records  &lt;/li&gt;
  &lt;li&gt;Each pixel will contain several hundred bands worth of reflectance data.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/LandsatVsHyper-01.png&quot;&gt;
    &lt;img src=&quot;/images/LandsatVsHyper-01.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;A hyperspectral instruments records reflected light energy across very narrow bands. The NEON Imaging Spectrometer collects 428 bands of information for each pixel on the ground.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Read more about hyperspectral data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.geos.ed.ac.uk/abs/research/micromet/Current/airborne/knowledge_exhange/john_ferguson_imaging.pdf&quot; target=&quot;_blank&quot;&gt;Presentation by Dr John Ferguson&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://spacejournal.ohio.edu/pdf/shippert.pdf&quot; target=&quot;_blank&quot;&gt;White paper by Dr Peg Shippert&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.asprs.org/a/publications/pers/2004journal/april/highlight.pdf&quot; target=&quot;_blank&quot;&gt;ASPRS Explanation of Hyperspectral Remote Sensing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s open some hyperspectral imagery stored in HDF5 format to see what the file structure can like for a different type of data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open the file. Notice that it is structured differently. This file is composed of 3 datasets: Reflectance, fwhm, and wavelength. It also contains some text information called “map info”. Finally it contains a group called spatial info.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Let’s first look at the metadata stored in the spatialinfo group. This group contains all of the spatial information that a GIS program would need to project the data spatially.&lt;/li&gt;
  &lt;li&gt;Next double click on the wavelength dataset. Note that this dataset contains the central wavelength value for each band in the dataset. &lt;/li&gt;
  &lt;li&gt;Finally, click on the reflectance dataset. Note that in the metadata for the dataset that the structure of the dataset is 426 x 501 x 477 (wavelength, line, sample). &lt;/li&gt;
  &lt;li&gt;Right click on the reflectance dataset and select &lt;code&gt;open as&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Click Image in the “display as” settings on the left hand side of the popup. &lt;/li&gt;
  &lt;li&gt;In this case, the image data are in the second and third dimensions of this dataset. however, HDFview will default to selecting the first and second dimensions. Let’s fix that. 
    &lt;ul&gt;
      &lt;li&gt;Under height, make sure dim 1 is selected.&lt;/li&gt;
      &lt;li&gt;Under width, make sure dim 3 is selected.  &lt;/li&gt;
      &lt;li&gt;Notice an image preview appears on the left of the pop-up window.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hit OK to open the image. You may have to play with the brightness and contrast settings in the viewer to see the data properly. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explore the spectral dataset in the HDFviewer taking note of the metadata and data stored within the file.&lt;/p&gt;

&lt;p&gt;The end!!  &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/HDF5/Exploring-Data-HDFView&quot;&gt;HDFView: Exploring HDF5 Files in the Free HDFview Tool&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 30, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[R: Creating HDF5 Files in the R]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/HDF5/Create-HDF5-In-R/" />
  <id>http://localhost:4000/HDF5/R-Create-Hierarchical-Data-Format-HDF5</id>
  <published>2015-01-29T08:22:52-07:00</published>
  <updated>2015-01-29T08:22:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#hdf5-in-r&quot;&gt;HDF5 in R&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#create-an-hdf5-file-in-r&quot;&gt;Create an HDF5 File in R&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#add-metdata-to-hdf5-files&quot;&gt;Add Metdata to HDF5 Files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reading-data-from-an-hdf5-file&quot;&gt;Reading Data from an HDF5 File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;div id=&quot;objectives&quot;&gt;
&lt;strong&gt;R Skill Level: &lt;/strong&gt; intermediate

&lt;h3&gt;Goals / Objectives&lt;/h3&gt;
After completing this activity, you will:
&lt;ol&gt;
&lt;li&gt;Understand how HDF5 files can be created and structured in R using the rhfd libraries. &lt;/li&gt;
&lt;li&gt;Understand the 3 key HDF5 elements: the HDF5 file itself and groups and datasets.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What You&#39;ll Need&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R or R studio installed and the R HDF5 libraries.&lt;/li&gt;
&lt;li&gt;Recommended Background: Consider reviewing the documentation for the &lt;a href=&quot;http://www.bioconductor.org/packages/release/bioc/manuals/rhdf5/man/rhdf5.pdf&quot; target=&quot;_blank&quot;&gt;RHDF5 libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;a-brief-review---about-hdf5&quot;&gt;A Brief Review - About HDF5&lt;/h3&gt;
&lt;p&gt;The HDF5 file can store large, heterogeneous datasets that include metadata. It also supports efficient &lt;code&gt;data slicing&lt;/code&gt;, or extraction of particular subsets of a dataset which means that you don’t have to read  large files read into the computers memory / RAM in their entirety in order work with them. This saves a lot of time when working with with HDF5 data in &lt;code&gt;R&lt;/code&gt;. When HDF5 files contain spatial data, they can also be read directly into GIS programs such as &lt;code&gt;QGiS&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Remember that the HDF5 format is a self-contained directory structure. We can compare this structure to the folders and files located on your computer. However, in HDF5 files  “directories” are called &lt;code&gt;groups&lt;/code&gt; and files are called &lt;code&gt;datasets&lt;/code&gt;. The HDF5 element itself is a file. Each element in an HDF5 file can have metadata attached to it making HDF5 files “self-describing”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/HDF5/About/&quot;&gt;Read more about HDF5 here.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;hdf5-in-r&quot;&gt;HDF5 in R&lt;/h2&gt;

&lt;p&gt;To access HDF5 files in &lt;code&gt;R&lt;/code&gt;, you need base &lt;a href=&quot;http://www.hdfgroup.org/HDF5/release/obtain5.html#obtain&quot; target=&quot;_blank&quot;&gt;HDF5 libraries&lt;/a&gt; installed on your computer. It might also be useful to install &lt;a href=&quot;http://www.hdfgroup.org/products/java/hdfview/&quot; target=&quot;_blank&quot;&gt;the free HDF5 viewer&lt;/a&gt; which will allow you to explore the contents of an HDF5 file visually using a graphic interface. &lt;a href=&quot;/HDF5/Exploring-Data-HDFView/&quot;&gt;More about working with HDFview and a hands-on activity here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The package we’ll be using is &lt;code&gt;rhdf5&lt;/code&gt; which is part of the &lt;a href=&quot;http://www.bioconductor.org&quot; target=&quot;_blank&quot;&gt;Bioconductor&lt;/a&gt; suite of &lt;code&gt;R&lt;/code&gt; packages. If you haven’t installed this package before, you can use the first two lines of code below to install the package. Then use the library command to call the &lt;code&gt;library(&quot;rhdf5&quot;)&lt;/code&gt; library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#install rhdf5 package
source(&quot;http://bioconductor.org/biocLite.R&quot;)
biocLite(&quot;rhdf5&quot;)
library(&quot;rhdf5&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bioconductor.org/packages/release/bioc/vignettes/rhdf5/inst/doc/rhdf5.pdf&quot; target=&quot;_blank&quot;&gt;Read more about the &lt;code&gt;rhdf5&lt;/code&gt; package here.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-an-hdf5-file-in-r&quot;&gt;Create an HDF5 File in R&lt;/h2&gt;

&lt;p&gt;Let’s start by outlining the structure of the file that we want to create.  We’ll build a file called “sensorData.h5”, that will hold data for a set of sensors at three different locations. Each sensor takes three replicates of two different measurements, every minute. &lt;/p&gt;

&lt;p&gt;HDF5 allows us to organize and store data in many ways. Therefore we need to decide what type of structure is ideally suited to our data before creating the HDF5 file. To structure the HDF5 file, we’ll start at the file level. We will create a group for each sensor location. Within each location group, we will create two datasets containing temperature and precipitation data collected through time at each location.&lt;/p&gt;

&lt;p&gt;So it will look something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HDF5 FILE (sensorData.H5)
    &lt;ul&gt;
      &lt;li&gt;Location_One (Group)
        &lt;ul&gt;
          &lt;li&gt;Temperature (Dataset)&lt;/li&gt;
          &lt;li&gt;Precipitation (Dataset)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Location_Two  (Group)
        &lt;ul&gt;
          &lt;li&gt;Temperature (Dataset)&lt;/li&gt;
          &lt;li&gt;Precipitation (Dataset)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Location_Three  (Group)
        &lt;ul&gt;
          &lt;li&gt;Temperature (Dataset)&lt;/li&gt;
          &lt;li&gt;Precipitation (Dataset)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s first create the HDF5 file and call it “sensorData.h5”. Next, we will add a group for each location to the file. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#create hdf5 file
h5createFile(&quot;sensorData.h5&quot;)
#create group for location 1
h5createGroup(&quot;sensorData.h5&quot;, &quot;location1&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember from the discussion above that we want to create 3 location groups. The process of creating nested groups can be simplified with loops and nested loops. While the for loop below might seem excessive for adding three groups, it will become increasingly more efficient as we need to add more groups to our file. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#create loops that will populate 2 additional location &quot;groups&quot; in our HDF5 file
l1 &amp;lt;- c(&quot;location2&quot;,&quot;location3&quot;)
for(i in 1:length(l1)){
  	  h5createGroup(&quot;sensorData.h5&quot;, l1[i])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s view the structure of our HDF5 file. We’ll use the &lt;code&gt;h5ls()&lt;/code&gt; function to do this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# View HDF5 File Structure
h5ls(&quot;sensorData.h5&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our group structure that will contain location information is now set-up. However, it doesn’t contain any data. Let’s simulate some data pretending that each sensor took replicate measurements for 100 minutes. We’ll add a 100 x 3 matrix that will be stored as a &lt;strong&gt;dataset&lt;/strong&gt; in our HDF5 file. We’ll populate this dataset with simulated data for each of our groups. We’ll use loops to create these matrices and then paste them into each location group within the HDF5 file as datasets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Add datasets to each group
for(i in 1:3){
  g &amp;lt;- paste(&quot;location&quot;,i,sep=&quot;&quot;)
  #populate matrix with dummy data
  #create precip dataset within each location group
  h5write(matrix(rnorm(300,2,1),ncol=3,nrow=100),file = &quot;sensorData.h5&quot;,paste(g,&quot;precip&quot;,sep=&quot;/&quot;))
  #create temperature dataset within each location group
  h5write(matrix(rnorm(300,25,5),ncol=3,nrow=100),file = &quot;sensorData.h5&quot;,paste(g,&quot;temp&quot;,sep=&quot;/&quot;))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;understandig-complex-code&quot;&gt;Understandig Complex Code&lt;/h3&gt;
&lt;p&gt;Sometimes you may run into code that combines multiple functions into one line. It can be helpful to break the pieces of the code apart to understand their function. &lt;/p&gt;

&lt;p&gt;Let’s start with &lt;code&gt;matrix(rnorm(300,2,1),ncol=3,nrow=100)&lt;/code&gt;. This is telling R to create a matrix that has 3 columns and 100 rows. Do the following to figure out what it’s doing.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Paste &lt;code&gt;(g,&quot;temp&quot;,sep=&quot;/&quot;)&lt;/code&gt; into the R console. What is the result?&lt;/li&gt;
  &lt;li&gt;Paste &lt;code&gt;rnorm(300,2,1)&lt;/code&gt; into the console and see the result. &lt;/li&gt;
  &lt;li&gt;Type &lt;code&gt;g&lt;/code&gt; into the console and take note of the result.&lt;/li&gt;
  &lt;li&gt;Type help(norm) to understand what norm does. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;rnorm&lt;/code&gt; function creates a set of random numbers that fall into a normal distribution. You specify the mean and standard deviation of the dataset and R does the rest. Notice in this loop we are creating a “precip” and a “temp” dataset and pasting them into each location group (the loop iterates 3 times).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;h5write&lt;/code&gt; function is writing each matrix to a dataset in our HDF5 file (sensorData.h5). It is looking for the following arguments: &lt;code&gt;hrwrite(dataset,YourHdfFileName,LocationOfDatasetInH5File)&lt;/code&gt;. Therefore, the code: &lt;code&gt;(matrix(rnorm(300,2,1),ncol=3,nrow=100),file = &quot;sensorData.h5&quot;,paste(g,&quot;precip&quot;,sep=&quot;/&quot;))&lt;/code&gt; tells R to add a random matrix of values to the sensorData HDF5 file within the path called &lt;code&gt;g&lt;/code&gt;.  It also tells R to call the dataset within that group, “precip”. &lt;/p&gt;

&lt;h3 id=&quot;hdf5-file-structure&quot;&gt;HDF5 File Structure&lt;/h3&gt;
&lt;p&gt;Next, let’s check the file structure of the sensorData.h5 file. The &lt;code&gt;h5ls()&lt;/code&gt; command tells us what each element in the file is, group or dataset. It also identifies the dimensions and types of data stored within the datasets in the HDF5 file. In this case, the  precipitation and temperature datasets are of type ‘float’ and of dimensions 100 x 3 (100 rows by 3 columns).&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip:&lt;/strong&gt; It’s useful to learn about the different types of data that can be stored within R (and other objects). &lt;a href=&quot;http://www.burns-stat.com/documents/tutorials/impatient-r/more-r-key-objects/more-r-numbers/#twonum&quot; target=&quot;_blank&quot;&gt;Learn more about float vs integer data here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# List file structure
h5ls(&quot;sensorData.h5&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;data-types-within-hdf5&quot;&gt;Data Types within HDF5&lt;/h3&gt;
&lt;p&gt;HDF5 files can hold mixed types of data. For example HDF5 files can store both strings and numbers in the same file. Each dataset in an HDF5 file can be its own type. For example a dataset can be composed of all integer values or it could be composed of all strings (characters). A group can contain a mix of string, and number based datasets.  However a dataset can also be mixed within the dataset containing a combination of numbers and strings. &lt;/p&gt;

&lt;h2 id=&quot;add-metdata-to-hdf5-files&quot;&gt;Add Metdata to HDF5 Files&lt;/h2&gt;

&lt;p&gt;Some metadata can be added to an HDF5 file in R by creating attributes in R objects before adding them to the HDF5 file. Let’s look at an example of how we do this. We’ll add the units of our data as an attribute of the R matrix before adding it to the HDF5 file. Note that &lt;code&gt;write.attributes = TRUE&lt;/code&gt; is needed when you write to the HDF5 file, in order to add metadata to the dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create matrix of &quot;dummy&quot; data
p1 &amp;lt;- matrix(rnorm(300,2,1),ncol=3,nrow=100)
# Add attribute to the matrix (units)
attr(p1,&quot;units&quot;) &amp;lt;- &quot;millimeters&quot;

# Write the R matrix to the HDF5 file 
h5write(p1,file = &quot;sensorData.h5&quot;,&quot;location1/precip&quot;,write.attributes=T)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;reading-data-from-an-hdf5-file&quot;&gt;Reading Data from an HDF5 File&lt;/h2&gt;
&lt;p&gt;We just learned how to create an HDF5 file and write information to the file. We use a different set of functions to read data from an HDF5 file. If &lt;code&gt;read.attributes&lt;/code&gt; is set to &lt;code&gt;TRUE&lt;/code&gt; when we read the data, then we can also see the metadata for the matrix. Furthermore, we can chose to read in a subset, like the first 10 rows of data, rather than loading the entire dataset into R.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Read in all data contained in the precipitation dataset 
l1p1 &amp;lt;- h5read(&quot;sensorData.h5&quot;,&quot;location1/precip&quot;,read.attributes=T)

# Read in first 10 lines of the data contained within the precipitation dataset 
l1p1s &amp;lt;- h5read(&quot;sensorData.h5&quot;,&quot;location1/precip&quot;,read.attributes = T,index = list(1:10,NULL))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;extra-credit-if-you-get-done-early&quot;&gt;Extra Credit If you get done early…&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Think about an application for HDF5 that you might have. Create a new HDF5 File that would support the data that you need to store. &lt;/li&gt;
  &lt;li&gt;Open the sensordata.H5 file in the HDFviewer.&lt;/li&gt;
&lt;/ul&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/HDF5/Create-HDF5-In-R/&quot;&gt;R: Creating HDF5 Files in the R&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 29, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Working With Temperature Data Collected for Multiple Sites and Stored in  HDF5 Format in R]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/HDF5/Explore-HDF5-Using-R/" />
  <id>http://localhost:4000/HDF5/R-Explore-Viz-Hierarchical-Data-Format-HDF5</id>
  <published>2015-01-28T13:49:52-07:00</published>
  <updated>2015-01-28T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#working-with-neon-temporal-temperature-tower-data&quot;&gt;Working with NEON Temporal Temperature Tower Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#examine-file-contents&quot;&gt;1. Examine File Contents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#slicing-data&quot;&gt;Slicing Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#plotting-neon-temperature-data-extracted-from-an-hdf5-file-using-ggplot&quot;&gt;2 Plotting NEON Temperature Data Extracted from an HDF5 file Using GGPLOT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-from-different-sites&quot;&gt;Data from different sites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;&lt;strong&gt;R Skill Level:&lt;/strong&gt; intermediate&lt;/p&gt;

&lt;div id=&quot;objectives&quot;&gt;
&lt;h3&gt;Goals / Objectives&lt;/h3&gt;

After completing this activity, you will:
&lt;ol&gt;
&lt;li&gt; Know how to explore an HDF5 file and access groups and datasets in R.&lt;/li&gt;
&lt;li&gt; Understand the basics of manipulating big data sets using indexing, loops, and `dplyr`.&lt;/li&gt;
&lt;li&gt; Refine your data plotting skills using `GGPLOT` in `R`.&lt;/li&gt;
&lt;li&gt; Be exposed to and learn how to apply a variety of data manipulation tasks including identifying data types given a new dataset, string parsing, and working with / formatting date information.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;You will need:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R or R studio running on your computer. &lt;/li&gt;
&lt;li&gt;HDF5 libraries and associated packages as described in the &quot;getting started&quot; section below. &lt;/li&gt;
&lt;li&gt;Recommended Background: Consider reviewing the documentation for the &lt;a href=&quot;http://www.bioconductor.org/packages/release/bioc/manuals/rhdf5/man/rhdf5.pdf&quot; target=&quot;_blank&quot;&gt;RHDF5 libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Data to Download:&lt;/h3&gt;
&lt;a href=&quot;../../data/NEON_TowerDataD3_D10.hdf5&quot; target=&quot;_blank&quot; class=&quot;btn btn-success&quot;&gt;Download the National Ecological Observatory Network (NEON) Flux Tower Temperature data HERE &lt;/a&gt;

&lt;/div&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;To access HDF5 files in R, you’ll need to first install the base &lt;a href=&quot;http://www.hdfgroup.org/HDF5/release/obtain5.html#obtain&quot;&gt;HDF5 libraries&lt;/a&gt;. It might also be useful to install &lt;a href=&quot;http://www.hdfgroup.org/products/java/hdfview/&quot;&gt;HDFview&lt;/a&gt; which will allow you to explore the contents of an HDF5 file visually using a graphic interface. &lt;/p&gt;

&lt;p&gt;The package we’ll be using is &lt;code&gt;rhdf5&lt;/code&gt; which is part of the &lt;a href=&quot;http://www.bioconductor.org&quot; target=&quot;_blank&quot;&gt;Bioconductor&lt;/a&gt; suite of &lt;code&gt;R&lt;/code&gt; packages. If you haven’t installed this package before, you can use the first two lines of code below to install. Then use the library command to call the &lt;code&gt;rhdf5&lt;/code&gt; library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Install rhdf5 packages
# source(&quot;http://bioconductor.org/biocLite.R&quot;)
# biocLite(&quot;rhdf5&quot;)
library(&quot;rhdf5&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;hdf5-quick-review&quot;&gt;HDF5 Quick Review&lt;/h3&gt;
&lt;p&gt;The HDF5 format is a self-contained directory structure. In HDF5 files though “directories” are called “&lt;strong&gt;groups&lt;/strong&gt;” and “&lt;strong&gt;files&lt;/strong&gt;” are called “datasets”. Each element in an hdf5 file can have metadata attached to it making HDF5 files “self-describing”.&lt;/p&gt;

&lt;h2 id=&quot;working-with-neon-temporal-temperature-tower-data&quot;&gt;Working with NEON Temporal Temperature Tower Data&lt;/h2&gt;
&lt;p&gt;In this activity, we’ll work with &lt;a href=&quot;http://neoninc.org/science-design/collection-methods/flux-tower-measurements&quot;&gt; temperature data collected using sensors on a flux tower&lt;/a&gt; by  &lt;a href=&quot;http://www.neoninc.org&quot; target=&quot;_blank&quot;&gt;the National Ecological Observatory Network (NEON) &lt;/a&gt;. NEON will provide 30 years of open ecological data.&lt;/p&gt;

&lt;p&gt;We’ll examine our HDF5 file as if we knew nothing about it. We will view its structure, extract metadata and visualize data contained within datasets in the HDF5 file. We will also use use loops and custom functions to efficiently examine data with a complex nested structure using advanced tools like &lt;code&gt;dplyr&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;examine-file-contents&quot;&gt;1. Examine File Contents&lt;/h2&gt;

&lt;p&gt;Often we don’t know the structure of an HDF5 file that we receive. This means that to work with the data, we’ll first need to explore the underlying file structure. Let’s explore a NEON flux tower data file in HDF5 format in R. We’ll examine the file contents using the R function, &lt;code&gt;h5ls&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Load file
#NOTE: be sure to adjust the path to match your file structure!
# Identify file path
f &amp;lt;- &quot;data/NEON_TowerDataD3_D10.hdf5&quot;
# View structure of file
h5ls(f,all=T)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;h5ls&lt;/code&gt; returns the full, hierarchical file structure including the group name, the name of a particular node (which may be a group), the type, class and the dimensions of the object. In this case the class of the groups is compound. Compound class means there are mixed data types (e.g. some columns are strings and some columns are integer or floating point numbers)  contained within that group. The dimensions for each dataset are also returned. When the dataset is compound, the dimension returned is the number of elements (or rows in the matrix in this case).&lt;/p&gt;

&lt;h2 id=&quot;slicing-data&quot;&gt;Slicing Data&lt;/h2&gt;
&lt;p&gt;One major benefit of HDF5 files is the ability to subset or &lt;code&gt;slice&lt;/code&gt; out parts of the file. Data slicing is particularly useful and efficient if you’re dealing with large files (even gigabytes or more). Let’s extract some temperature data, collected at &lt;a href=&quot;http://neoninc.org/science-design/field-sites/ordway-swisher-biological-station&quot; target=&quot;_blank&quot;&gt;the NEON field site - Ordway Swisher Biological Station (OSBS)&lt;/a&gt; and plot it.&lt;/p&gt;

&lt;p&gt;Remember that we are dealing with &lt;strong&gt;hierarchical data&lt;/strong&gt;. In this case we have a nested group and dataset structure. Below, we will slice out temperature data which is located within the following path:
 Domain_03 –&amp;gt; OSBS –&amp;gt; min_1 –&amp;gt; boom_1 –&amp;gt;temperature&lt;/p&gt;

&lt;p&gt;Take note that there are 4 groups and one dataset called temperature in this part of the HDF5 file as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Domain_03&lt;/strong&gt; - A NEON domain is an ecologically unique region. Domain 3 is one of 20 regions that &lt;a href=&quot;http://neoninc.org/science-design/spatiotemporal-design&quot; target=&quot;_blank&quot;&gt;NEON uses to organize its network spatially &lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OSBS&lt;/strong&gt; - a group representing data from the &lt;a href=&quot;http://neoninc.org/science-design/field-sites/ordway-swisher-biological-station&quot; target=&quot;_blank&quot;&gt; Ordway Swisher Biological Station.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;min_1&lt;/strong&gt; - A group representing the mean temperature data value for every for one minute in time. Temperature data is often collected at high frequencies (20 hz or 20 measurements a second) or more. A typical data product derived from high frequency data is an average value - in this case, all measurements are averaged every minute.  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;boom_1&lt;/strong&gt; - Boom 1 is the first and lowest arm or level on the tower. Towers often contain arms where the sensors are mounted, that reach out horizontally away from the tower (see figure below). The tower at Ordway Swisher has a total of 6 booms (booms 1-5 and the tower top). &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Note:&lt;/strong&gt; The data used in this activity were collected by a temperature sensor mounted on a National Ecological Observatory Network (NEON) “flux tower”. 
&lt;a href=&quot;http://neoninc.org/science-design/collection-methods/flux-tower-measurements&quot; target=&quot;_blank&quot;&gt;Read more about NEON towers, here. &lt;/a&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/NEONtower.png&quot;&gt;&lt;img src=&quot;/images/NEONtower.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;A NEON tower contains booms or arms that house sensors at varying heights along the tower.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;#read in temperature data
temp &amp;lt;- h5read(f,&quot;/Domain_03/OSBS/min_1/boom_1/temperature&quot;)
#view the first few lines of the data 
head(temp)
#generate a quick plot of the data
plot(temp$mean,type=&#39;l&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/TempData.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can make our plot look nicer by adding date values to the x axis. However, in order to list dates o the X axis, we need to assign the date field a date format so that R knows how to read and organize the labels on the axis.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Assign the date column a date format.
temp$date &amp;lt;- as.POSIXct(temp$date ,format = &quot;%Y-%m-%d %H:%M:%S&quot;, tz = &quot;EST&quot;)

#load GGPLOT 
library(ggplot2)
#Create plot
ordwayPlot &amp;lt;- qplot (date,mean,data=temp,geom=&quot;line&quot;, title=&quot;ordwayData&quot;,
                 main=&quot;Mean Temperature Over 3 Days For Ordway Swisher Biological Station&quot;, xlab=&quot;Date&quot;, 
                 ylab=&quot;Mean Temperature (Degrees C)&quot;)

#let&#39;s check out the plot
ordwayPlot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your plot should look like this - pretty cool, right?:&lt;/p&gt;

&lt;iframe width=&quot;460&quot; height=&quot;345&quot; frameborder=&quot;0&quot; seamless=&quot;seamless&quot; scrolling=&quot;no&quot; src=&quot;https://plot.ly/~leahawasser/6.embed?width=460&amp;amp;height=345&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;extracting-metadata&quot;&gt;Extracting metadata&lt;/h3&gt;
&lt;p&gt;Remember in HDF5 files, metadata can be stored for all elements (the file itself, groups and datasets) in the HDF5 file. To read the metadata for elements in a file in R, you can use the &lt;code&gt;h5readAttributes&lt;/code&gt; function. We’ll work with this next.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## Get names of elements in our file
fiu_struct &amp;lt;- h5ls(f,all=T)
## Concatenate the domain and the site names separated with a backslash
# This is the path to the metadata that we are interested in
g &amp;lt;- paste(fiu_struct[2,1:2],collapse=&quot;/&quot;)
# Check out the element g that was created above by printing it
print(g)
#  View the metadata for &quot;g&quot;
h5readAttributes(f,g)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember that you can work through the elements of the code above to understand it by typing each line into the console and examining the results. For instance, what happens when you type &lt;code&gt;fiu_struct[2,1:2]&lt;/code&gt; into the console?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Extra: Explore using the temperature data further using &lt;code&gt;h5ls&lt;/code&gt; . View attribute data for other groups within the file. If you have the HDFViewer installed, consider comparing what you get from are to what you see in the file visually using the HDFviewer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;end-part-1-&quot;&gt;&lt;strong&gt;**&lt;/strong&gt;* End Part 1 &lt;strong&gt;**&lt;/strong&gt;**&lt;/h3&gt;

&lt;h2 id=&quot;plotting-neon-temperature-data-extracted-from-an-hdf5-file-using-ggplot&quot;&gt;2 Plotting NEON Temperature Data Extracted from an HDF5 file Using GGPLOT&lt;/h2&gt;

&lt;p&gt;The NEON HDF5 file that we are working with contains temperature data collected for three days (a very small subset of the available data) using temperature sensors mounted on a towers located at two different &lt;a href=&quot;http://neoninc.org/science-design/field-sites&quot; target=&quot;_blank&quot;&gt;NEON field sites&lt;/a&gt;. What if we wanted to create a plot that compared data across sensors or sites? &lt;/p&gt;

&lt;h3 id=&quot;data-from-different-sensors-located-at-different-levels-at-one-neon-field-site&quot;&gt;Data From Different Sensors Located at Different Levels, At One NEON Field Site&lt;/h3&gt;

&lt;p&gt;To compare data, we’ll first need to loop through the HDF5 file and build a new data frame that contains temperature information over time, for each sensor or site. Let’s start by comparing temperature data collected by sensor located at different heights (on different boom arms on the tower), and averaged every 1 minute for the NEON Domain 3 site, Ordway Swisher Biological Station located in Florida.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Load libraries
library(dplyr)

# Set the path string
s &amp;lt;- &quot;/Domain_03/Ord/min_1&quot;

# Grab the paths to the data we want to use
paths &amp;lt;- fiu_struct %&amp;gt;% filter(grepl(s,group), 
     grepl(&quot;DATA&quot;,otype)) %&amp;gt;% group_by(group) %&amp;gt;% summarise(path = paste(group,name,sep=&quot;/&quot;))
#create a new blank data frame    
ord_temp &amp;lt;- data.frame()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code uses the powerful &lt;code&gt;dplyr&lt;/code&gt; libraries to filter data. Let’s break the code down. &lt;code&gt;dplyr&lt;/code&gt; is a package worth getting to know if you are working with big data. &lt;a href=&quot;http://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html&quot; target=&quot;_blank&quot;&gt;Read more about the &lt;code&gt;dplyr&lt;/code&gt; package here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;fiu_struct&lt;/code&gt;, defined above in the code, is the structure of our HDF5 file that we returned using &lt;code&gt;h5ls&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;grepl&lt;/code&gt; looks for a text pattern. Type &lt;code&gt;help(grepl)&lt;/code&gt; to see how it operates. We want to return all “paths” in the HDF file that match &lt;code&gt;s&lt;/code&gt; which we defined earlier as “/Domain_03/Ord/min_1”. Type &lt;code&gt;s&lt;/code&gt; into the console to see what comes up. &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;%&amp;gt;%&lt;/code&gt; is syntax specific to the &lt;code&gt;dplyr&lt;/code&gt; package. the &lt;code&gt;dplyr&lt;/code&gt; package contains functions that are used to query and subset data in different ways. The &lt;code&gt;%&amp;lt;%&lt;/code&gt; function allows you to ‘chain’ or combine multiple queries together into one, concise, line of code. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pulling this together, type, &lt;code&gt;fiu_struct %&amp;gt;% filter(grepl(s,group))&lt;/code&gt; in the console. This code will return a list of both datasets and groups for the Domain_03 site that contain the “/Domain_03/Ord/min_1” path. 
Now let’s review the second part of the code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;grepl(&quot;DATA&quot;,otype))&lt;/code&gt; tells R to look for objects in the file that contain the word “data”. Type: &lt;code&gt;fiu_struct %&amp;gt;% filter(grepl(s,group), grepl(&quot;DATA&quot;,otype))&lt;/code&gt; in the console. Notice that this code returns the elements in the file that are both for the Ordway site AND are of type “dataset”.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;group_by(group) %&amp;gt;% summarise(path = paste(group,name,sep=&quot;/&quot;))&lt;/code&gt;: This code appends the group name (boom_1, boom_2, etc.) and the dataset name (temperature in this case) to the path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we will create a loop that will populate the final &lt;code&gt;data.frame&lt;/code&gt; that contains information for all booms in the site that we want to plot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#populate the ord_temp data frame using a for loop
for(i in paths$path){
 boom &amp;lt;-  strsplit(i,&quot;/&quot;)[[1]][5]
 dat &amp;lt;- h5read(f,i)
 dat$boom &amp;lt;- rep(boom,dim(dat)[1])
 ord_temp &amp;lt;- rbind(ord_temp,dat)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loop above iterates through the file and grabs the temperature data for each boom in the 1 minute data series for Ordway. It also adds the boom name to the end of the &lt;code&gt;data.frame&lt;/code&gt; as follows: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;for i in path$path&lt;/code&gt;. We have 5 “paths” total - one for each boom: booms 1,2,3,5 and the tower top. NOTE: the boom 4 sensor was not operational when this HDF5 file was created, which is why there is no boom 4 in our list! Thus we will need do iterate through the data 5 times&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boom &amp;lt;-  strsplit(i,&quot;/&quot;)[[1]][5]&lt;/code&gt;: identify the name of the boom for iteration i. &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dat &amp;lt;- h5read(f,i)&lt;/code&gt;: read in the data from our hdf5 file (f) for iteration i (whichever iteration in the loop we are on) .&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dat$boom &amp;lt;- rep(boom,dim(dat)[1])&lt;/code&gt;: add the boom name as the final column in the dataset - column named “boom”&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;ord_temp &amp;lt;- rbind(ord_temp,dat)&lt;/code&gt;: append dataset to the end of the data.frame called ord_temp&lt;/p&gt;

    &lt;p&gt;EXTRA CREDIT: Modify the loop above so that it adds both the boom name, the site name and the data type (1 minute) as columns in our data frame.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cleaning-up-dates&quot;&gt;Cleaning Up Dates&lt;/h3&gt;
&lt;p&gt;The dates field in our data frame aren’t imported by default in “date format”. We need to tell R to format the information as a date. Formatting out date fields also allows us to properly label the x axis of our plots. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#format the date column as a date field. &quot;TZ:, time zone = Eastern Standard Time
ord_temp$date &amp;lt;- as.POSIXct(ord_temp$date,format = &quot;%Y-%m-%d %H:%M:%S&quot;, tz = &quot;EST&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can make our plot of temperature for all booms on the tower! Notice we are using ggplot to do this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ggplot(ord_temp,aes(x=date,y=mean,group=boom,colour=boom))+geom_path()+ylab(&quot;Mean temperature&quot;) + xlab(&quot;Date&quot;)+theme_bw()+ggtitle(&quot;3 Days of temperature data at Ordway Swisher Biological Station&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/HDf5/ordwayPlot.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-from-different-sites&quot;&gt;Data from different sites&lt;/h2&gt;

&lt;p&gt;Next, let’s compare temperature at two different sites: Ordway Swisher Biological Station located in Florida and North Sterling located in Central Colorado. This time we’ll plot data averaged every 30 minutes instead of every minute. We’ll need to modify our search strings a bit. But we can still re-use most of the code that we just built.&lt;/p&gt;

&lt;p&gt;First, let’s extract all 30 minute averaged data, for all sites.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s &amp;lt;- &quot;min_30&quot;
# Grab the paths for all sites, 30 minute averaged data
paths &amp;lt;- fiu_struct %&amp;gt;% filter(grepl(s,group), grepl(&quot;DATA&quot;,otype)) %&amp;gt;% group_by(group) %&amp;gt;% summarise(path = paste(group,name,sep=&quot;/&quot;))

temp_30 &amp;lt;- data.frame()
for(i in paths$path){
  boom &amp;lt;-  strsplit(i,&quot;/&quot;)[[1]][5]
  site &amp;lt;- strsplit(i,&quot;/&quot;)[[1]][3]
  dat &amp;lt;- h5read(f,i)
  dat$boom &amp;lt;- rep(boom,dim(dat)[1])
  dat$site &amp;lt;- rep(site,dim(dat)[1])
 temp_30 &amp;lt;- rbind(temp_30,dat)
}

#Assign the date field to a &quot;date&quot; format in R
temp_30$date &amp;lt;- as.POSIXct(temp_30$date,format = &quot;%Y-%m-%d %H:%M:%S&quot;)

temp30_sum &amp;lt;- temp_30 %.% group_by(date,site) %&amp;gt;% summarise(mean = mean(mean))

#Create plot!
ggplot(temp30_sum,aes(x=date,y=mean,group=site,colour=site)) + geom_path()+ylab(&quot;Mean temperature, 30 Minute Average&quot;) + xlab(&quot;Date&quot;)+theme_bw()+ggtitle(&quot;Comparison of Ordway-Swisher Biological Station (FL) vs North Sterling (CO)&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/HDf5/OrdwaySterling.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Extra Credit: Create a plot of both sites with all booms at each site on the plot.&lt;/p&gt;
&lt;/blockquote&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/HDF5/Explore-HDF5-Using-R/&quot;&gt;Working With Temperature Data Collected for Multiple Sites and Stored in  HDF5 Format in R&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 28, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Raster Data in R - The Basics]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/R/Raster-Data-In-R/" />
  <id>http://localhost:4000/R/Raster-Data-In-R</id>
  <published>2015-01-26T13:49:52-07:00</published>
  <updated>2015-01-26T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#about-raster-data&quot;&gt;About Raster Data&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#about-utm&quot;&gt;About UTM&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#working-with-rasters-in-r&quot;&gt;Working with Rasters in R&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cropping-rasters-in-r&quot;&gt;Cropping Rasters in R&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#part-2---working-with-multiple-rasters-within-raster-stacks-and-raster-bricks&quot;&gt;Part 2 - Working with multiple rasters within Raster Stacks and Raster Bricks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#raster-bricks-in-r&quot;&gt;Raster Bricks in R&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#write-a-raster-to-a-geotiff-file-in-r&quot;&gt;Write a raster to a Geotiff File in R&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;div id=&quot;objectives&quot;&gt;
&lt;h3&gt;About&lt;/h3&gt;
This activity will walk you through the fundamental principles of working with raster data in R.
&lt;strong&gt;R Skill Level:&lt;/strong&gt; Intermediate

&lt;h3&gt;Goals / Objectives&lt;/h3&gt;
This activity is under development
After completing this activity, you will know:
&lt;ol&gt;
&lt;li&gt;what a raster dataset is and it&#39;s fundamental attributes.&lt;/li&gt;
&lt;li&gt;How to work with the raster package to import rasters into R&lt;/li&gt;
&lt;li&gt;How to perform basic calculations using rasters in R.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What you&#39;ll Need&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R or R studio to write your code.&lt;/li&gt;
&lt;li&gt;GDAL libraries installed on you computer. &lt;a href=&quot;https://www.youtube.com/watch?v=ZqfiZ_J_pQQ&amp;amp;list=PLLWiknuNGd50NbvZhydbTqJJh5ZRkjuak&quot; target=&quot;_blank&quot;&gt;Click here for videos on installing GDAL on a MAC and a PC.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Data to Download&lt;/h3&gt;

Download the raster and *insitu* collected vegetation structure data:
&lt;b&gt;Part 1 data&lt;/b&gt;
&lt;a href=&quot;http://www.neonhighered.org/Data/LidarActivity/CHM_InSitu_Data.zip&quot; class=&quot;btn btn-success&quot;&gt; DOWNLOAD NEON  Sample NEON LiDAR Data&lt;/a&gt;
&lt;b&gt;Part 2 data&lt;/b&gt;
&lt;a href=&quot;http://www.neondataskills.org/data/rasterLayers_tif.zip&quot; class=&quot;btn btn-success&quot;&gt; DOWNLOAD NEON imagery data (tiff format) California Domain D17&lt;/a&gt;

&lt;p&gt;The LiDAR and imagery data used to create the rasters in this dataset were collected over the San Joachim field site located in California (NEON Domain 17) and processed at &lt;a href=&quot;http://www.neoninc.org&quot; target=&quot;_blank&quot;&gt;NEON &lt;/a&gt; headquarters. The entire dataset can be access by request from the NEON website.&lt;/p&gt;  

&lt;h3&gt;Pre-reqs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;http://neondataskills.org/HDF5/Working-With-Rasters/&quot;&gt;Please consider reading the background page on rasters, by clicking here.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://cran.r-project.org/web/packages/raster/raster.pdf&quot; target=&quot;_blank&quot;&gt;Read more about the Raster Package in R.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h1 id=&quot;about-raster-data&quot;&gt;About Raster Data&lt;/h1&gt;
&lt;p&gt;Raster or “gridded” data are data that are saved in pixels. In the spatial world, each pixel represents an area “land” on the ground. For example in the raster below, each pixel represents a particular land cover class that would be found in that location in the real world. &lt;a href=&quot;http://neondataskills.org/HDF5/Working-With-Rasters/&quot;&gt;More on rasters here&lt;/a&gt;. &lt;/p&gt;

&lt;figure&gt;
   &lt;figcaption&gt;Raster showing land cover??&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To work with rasters in R, you will want two key packages, &lt;code&gt;GDAL&lt;/code&gt; and &lt;code&gt;Raster&lt;/code&gt;. Let’s start by loading these into r. To install the raster package you can use &lt;code&gt;install.packages(‘raster’)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#load the raster and sp packages
library(raster)
library(sp)
#Set your working directory 
setwd(&quot;~/yourWorkingDirectoryHere&quot;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, let’s load the raster into R. Notice that we’re using some clever code that tells R to paste the working directory into the path, and then it tells it to add the location of the raster layer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#load raster in an R objected called &#39;DEM&#39;
DEM &amp;lt;- raster(paste(getwd(), &quot;/path here/SJER2013_DTM.tif&quot;, sep = &quot;&quot;))  # Tmin for January
#next, let&#39;s look at the attributes of the raster. 
DEM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OUTPUT:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class       : RasterLayer 
dimensions  : 5060, 4299, 21752940  (nrow, ncol, ncell)
resolution  : 1, 1  (x, y)
extent      : 254570, 258869, 4107302, 4112362  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=utm +zone=11 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 
data source : /Users/law/Documents/data/CHM_InSitu_Data/DigitalTerrainModel/SJER2013_DTMHill.tif 
names       : SJER2013_DTMHill 
values      : 0, 253  (min, max)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice a few things about this raster. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Nrow, Ncol&lt;/strong&gt; is the number of rows and columns data. &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ncells&lt;/strong&gt; is the total number of pixels that make up the raster.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resolution&lt;/strong&gt; is the size of each pixel (in meters in this case)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Extent&lt;/strong&gt; this is the spatial extent of the raster. this value will be coordinate units associated with the coordinate reference system of the raster.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Coord ref&lt;/strong&gt; this is the coordinate reference system string for the raster. This raster is in UTM (Universal Trans mercator) zone 11 with a datum of WGS 84. &lt;a href=&quot;http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system&quot; target=&quot;_blank&quot;&gt;More in UTM here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;about-utm&quot;&gt;About UTM&lt;/h2&gt;

&lt;figure&gt;
   &lt;a href=&quot;http://upload.wikimedia.org/wikipedia/en/thumb/5/57/Utm-zones.svg/720px-Utm-zones.svg.png
&quot;&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/en/thumb/5/57/Utm-zones.svg/720px-Utm-zones.svg.png
&quot; /&gt;&lt;/a&gt;
 &lt;figcaption&gt;The UTM coordinate reference system breaks the world into 60 latitude zones.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;working-with-rasters-in-r&quot;&gt;Working with Rasters in R&lt;/h2&gt;
&lt;p&gt;Now that we have the raster loaded into R, let’s grab some key metadata.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEM@crs
DEM@extent
#plot the raster
plot(DEM)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also notice it has a resolution and a set of dimension values associated with the raster. This means less work for us!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OUTPUT:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class       : RasterLayer 
dimensions  : 5060, 4299, 21752940  (nrow, ncol, ncell)
resolution  : 1, 1  (x, y)
extent      : 254570, 258869, 4107302, 4112362  (xmin, xmax, ymin, ymax)
coord. ref. : +proj=utm +zone=11 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 
data source : /Users/law/Documents/data/CHM_InSitu_Data/DigitalSurfaceModel/SJER2013_DSM.tif 
names       : SJER2013_DSM 


#let&#39;s create a plot of our raster
plot(DEM)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;cropping-rasters-in-r&quot;&gt;Cropping Rasters in R&lt;/h1&gt;

&lt;p&gt;You can crop rasters in R using different methods. You can crop the raster right in the plot area. To do this, first plot the raster. Then define the crop extent by clicking twice: 1) click in the upper left hand corner where you want the crop box to begin. Then click again in the lower RIGHT hand corner where the box ends. you’ll see a red box on the plot. NOTE that this method is a manual process. But it’s cool to know how to do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#first, click in the upper left hand corner where you want the crop to begin
# next click somewhere in the lower right hand corner to define the bottom right corner of your extent box you will see
#note: this is a manual process!
plot(DEM)
cropBox &amp;lt;- drawExtent()
#crop the raster then plot the new cropped raster
DEMcrop &amp;lt;- crop(DEM, cropBox)
plot(DEMcrop)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also manually assign the coordinate to use to crop. You’ll need the extent defined as (xmin,xmax,ymin,ymax) to do this. This is how you’d crop using a GIS shapefile (with a rectangular shape)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cropbox2 &amp;lt;-c(255077.3,257158.6,4109614,4110934)
DEMcrop2 &amp;lt;- crop(DEM, cropbox2)
plot(DEMcrop2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;part-2---working-with-multiple-rasters-within-raster-stacks-and-raster-bricks&quot;&gt;Part 2 - Working with multiple rasters within Raster Stacks and Raster Bricks&lt;/h2&gt;
&lt;p&gt;We’ve now loaded a raster into R. We’ve also made sure we knew the CRS (coordinate reference system) and extent of the dataset among other key metadata attributes. Next, let’s create a raster stack from 3 raster images.&lt;/p&gt;

&lt;p&gt;A raster stack is a collection of raster layers. Each raster layer in the stack needs to be in the same projection (CRS), spatial extent and resolution. You might use raster stacks for different reasons. For instance, you might want to group a time series of rasters representing precipitation or temperature into one R object. In part 2, we will stack 3 bands from a multi-band image together to create a final RGB image.&lt;/p&gt;

&lt;p&gt;The difficult way to do this is to load our rasters one at a time. But we’re over that!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import tiffs
band19 &amp;lt;- &quot;CHANGE-THIS-TO-PATH-ON-YOUR-COMPUTER/DigitalSurfaceModel/band19.tif&quot;
band34 &amp;lt;- &quot;CHANGE-THIS-TO-PATH-ON-YOUR-COMPUTER/DigitalSurfaceModel/band34.tif&quot;
band58 &amp;lt;- &quot;CHANGE-THIS-TO-PATH-ON-YOUR-COMPUTER/DigitalSurfaceModel/band58.tif&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also just use the list.files command to grab all of the files in a directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#create list of files to make raster stack
#path to files
tifPath &amp;lt;- (paste(getwd(),&quot;/rasterLayers_tif&quot;,sep = &quot;&quot;))
rasterlist &amp;lt;- list.files(tifPath)

#create raster stack
rgbRaster &amp;lt;- stack(rasterlist)

#check to see that you&#39;ve created a raster stack and plot the layers
rgbRaster
plot(rgbRaster)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
   &lt;a href=&quot;/images/GIS/rgbStackPlot.png&quot;&gt;&lt;img src=&quot;/images/GIS/rgbStackPlot.png&quot; /&gt;&lt;/a&gt;
 &lt;figcaption&gt;All rasters in the rasterstack plotted.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can also explore the data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#look at histogram of reflectance values for all rasters
hist(rgbRaster)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
   &lt;a href=&quot;/images/GIS/RGBhist.png&quot;&gt;&lt;img src=&quot;/images/GIS/RGBhist.png&quot; /&gt;&lt;/a&gt;
 &lt;figcaption&gt;Histogram of reflectance values for each raster in the raster stack.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;#remember that crop function? You can crop all rasters within a raster stack too
#finally you can crop all rasters within a raster stack!
rgbRaster_crop &amp;lt;- crop(rgbRaster, cropBox)
plot(rgbRaster_crop)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
   &lt;a href=&quot;/images/GIS/cropRaster2.png&quot;&gt;&lt;img src=&quot;/images/GIS/cropRaster2.png&quot; /&gt;&lt;/a&gt;
 &lt;figcaption&gt;Histogram of reflectance values for each raster in the raster stack.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;raster-bricks-in-r&quot;&gt;Raster Bricks in R&lt;/h2&gt;
&lt;p&gt;Now we have a list of rasters in a stack. These rasters are all the same extent CRS and resolution but a raster brick will create one raster object in R that contains all of the rasters we can use this object to quickly create RGB images!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#create raster brick
RGBbrick &amp;lt;- brick(rgbRaster)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;write-a-raster-to-a-geotiff-file-in-r&quot;&gt;Write a raster to a Geotiff File in R&lt;/h2&gt;

&lt;p&gt;We can write out the raster in tiff format as well. When we do this it will copy the CRS, extent and resolution information so the data will read properly into a GIS as well. Note that this writes the raster in the order they are in - in the stack. In this case, the blue (band 19) is first but it’s looking for the red band first (RGB). One way around this is to generate a new raster stack, ordering the rasters in the proper - red, green and blue format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Make a new stack in the order we want the data in:
finalRGBstack &amp;lt;- stack(rgbRaster$band58,rgbRaster$band34,rgbRaster$band19)
#write the geotiff
writeRaster(finalRGBstack,&quot;rgbRaster.tiff&quot;,&quot;GTiff&quot;, overwrite=TRUE)
&lt;/code&gt;&lt;/pre&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/R/Raster-Data-In-R/&quot;&gt;Raster Data in R - The Basics&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 26, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Working With Rasters in R, Python, QGIS and Other Tools]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/GIS-Spatial-Data/Working-With-Rasters/" />
  <id>http://localhost:4000/GIS-Spatial-Data/Working-With-Rasters-in-R-Python-GIS</id>
  <published>2015-01-15T13:49:52-07:00</published>
  <updated>2015-01-15T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#spatial-resolution&quot;&gt;Spatial Resolution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spatial-extent&quot;&gt;Spatial Extent&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#coordinate-reference-system--projection-information&quot;&gt;Coordinate Reference System / Projection Information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-makes-spatial-data-line-up-on-a-map&quot;&gt;What Makes Spatial Data Line Up On A Map?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reprojecting-data&quot;&gt;Reprojecting Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;div id=&quot;objectives&quot;&gt;
NOTE: this page is under development! We welcome any and all feedback!
&amp;gt; 
&lt;h3&gt;Goals / Objectives&lt;/h3&gt;

After completing this activity, you will:
&lt;ol&gt;
&lt;li&gt;Know the key attributes required to work with raster data including: spatial extent, coordinate reference system and spatial resolution.&lt;/li&gt;
&lt;li&gt;Understand what a spatial extent it.&lt;/li&gt;
&lt;li&gt;Generally understand spatial references of large raster data cubes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;You will need:&lt;/h3&gt;
A working thinking cap. This is an overview / background activity.
&lt;/div&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;This activity with overview the key attributes that you need to extract for a raster dataset’s metadata in tools like R, Python and QGIS. Raster data, and raster data cubes can be organized and stored in many different ways. To understand raster datasets we often need to explore the data first to tease out key metadata or attributes including:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Spatial Resolution&lt;/li&gt;
  &lt;li&gt;Coordinate Reference System / Projection Information&lt;/li&gt;
  &lt;li&gt;Raster Extent&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This post will overview the key components of hyperspectral remote sensing data that are required to begin working with the data in a tool like &lt;code&gt;R&lt;/code&gt; or &lt;code&gt;Python&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;spatial-resolution&quot;&gt;Spatial Resolution&lt;/h2&gt;
&lt;p&gt;A raster consists of a series of uniform pixels, each with the same dimension and shape. In the case of rasters derived from airborne sensors, each pixel represents an area of space on the ground. The size of the area on the ground that each pixel covers is known as the spatial resolution of the image. For instance, an image that has a 1m spatial resolution means that each pixel in the image represents a 1 m x 1 m area on the ground.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/hyperspectral/pixelDetail.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/pixelDetail.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;The spatial resolution of a raster refers the size of each cell in meters. This size in turn relates to the area on the ground that the pixel represents.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;spatial-extent&quot;&gt;Spatial Extent&lt;/h2&gt;
&lt;p&gt;The spatial extent of a raster, represents the “X, Y” coordinates of the corners of the raster in geographic space. This information, in addition to the cell size or spatial resolution, tells the program how to place or render each pixel in 2 dimensional space.  Tools like &lt;code&gt;R&lt;/code&gt;, using supporting packages such as &lt;code&gt;GDAL&lt;/code&gt; and associated raster tools often have comments that allow you to define the extent of a raster that is created within the tool. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#set raster extent (R Code)
#xMN = minimum x value, xMX=maximum x value, yMN - minimum Y value, yMX=maximum Y value
	rasExt &amp;lt;- extent(xMN,xMX,yMN,yMX)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/hyperspectral/sat_image_corners.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/sat_image_corners.png&quot; /&gt;&lt;/a&gt;
   
    &lt;figcaption&gt;To be located geographically, the images location needs to be defined in geographic space (on a spatial grid). The spatial extent defines the 4 corners of a raster, within a given coordinate reference system.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;a href=&quot;/images/hyperspectral/sat_image_lat_lon.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/sat_image_lat_lon.png&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;The X and Y mins and max values relate to the coordinate system that the file is in (see below). &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;coordinate-reference-system--projection-information&quot;&gt;Coordinate Reference System / Projection Information&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A spatial reference system (SRS) or coordinate reference system (CRS) is a coordinate-based local, regional or global system used to locate geographical entities. – Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The earth is round. This is not an new concept by any means, however we need to remember this when we talk about coordinate reference systems associated with spatial data. When we make maps on paper or on a computer screen, we are moving from a 3 dimensional space (the globe) to 2 dimensions (our computer screens or a piece of paper). To keep this short, the projection of a dataset relates to how the data are “flattened” in geographic space so our human eyes and brains can make sense of the information in 2 dimensions. &lt;/p&gt;

&lt;p&gt;The projection refers to the mathematical calculations performed to “flatten the data” in into 2D space. The coordinate system references to the x and y coordinate space, that is associated with the projection used to flatten the data. If you have the same dataset, saved in two different projections, it won’t line up.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://source.opennews.org/media/cache/b9/4f/b94f663c79024f0048ae7b4f88060cb5.jpg&quot;&gt;&lt;img src=&quot;https://source.opennews.org/media/cache/b9/4f/b94f663c79024f0048ae7b4f88060cb5.jpg&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Maps of the United States in different projections. Notice the differences in shape associated with each different projection. These differences are a direct result of the calculations used to &quot;flatten&quot; the data onto a 2 dimensional map. Source: opennews.org&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://source.opennews.org/en-US/learning/choosing-right-map-projection/&quot; target=&quot;_blank&quot;&gt;Read more about projections.&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-map-projections-can-fool-the-eye&quot;&gt;How Map Projections Can Fool the Eye&lt;/h4&gt;
&lt;p&gt;Check out this short video highlighting how map projections can make continents seems proportionally larger or smaller than they actually are!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/KUF_Ckv8HbE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;what-makes-spatial-data-line-up-on-a-map&quot;&gt;What Makes Spatial Data Line Up On A Map?&lt;/h2&gt;
&lt;p&gt;There are lots of great resources that describe Coordinate Reference systems and projections in greater detail. However, for the purposes of this activity, what is important to understand is that data, from the same location, but saved in different projections &lt;strong&gt;will not line up in any GIS or other program&lt;/strong&gt;. Thus it’s important when working with spatial data in a program like &lt;code&gt;R&lt;/code&gt; or &lt;code&gt;Python&lt;/code&gt; to identify the coordinate reference system applied to the data, and to grab that information and retain it when you process / analyze the data.&lt;/p&gt;

&lt;h2 id=&quot;reprojecting-data&quot;&gt;Reprojecting Data&lt;/h2&gt;
&lt;p&gt;If you run into multiple spatial datasets with varying projections, you can always &lt;strong&gt;reproject&lt;/strong&gt; the data so that they are all in the same projection. Python and R both have reprojection tools that perform this task.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# reproject data to CRS of dataset2 in R
reprojectedData &amp;lt;- spTransform(dataset,CRS(proj4string(dataset2))) 
&lt;/code&gt;&lt;/pre&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/GIS-Spatial-Data/Working-With-Rasters/&quot;&gt;Working With Rasters in R, Python, QGIS and Other Tools&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 15, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[NEON Working With (Lidar Derived) Rasters in R]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/Data-Workshops/NEON-lidar-Rasters-R" />
  <id>http://localhost:4000/Data-Workshops/NEON-Lidar-Data-In-R-Rasters</id>
  <published>2015-01-15T13:49:52-07:00</published>
  <updated>2015-01-15T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;h3 id=&quot;a-neon-data-carpentry-workshop&quot;&gt;A NEON Data Carpentry Workshop&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; Spring 2015&lt;/p&gt;

&lt;p&gt;This workshop will providing hands on experience with working lidar data in raster format in R. It will cover the basics of what lidar data are, and commonly derived data products.&lt;/p&gt;

&lt;div id=&quot;objectives&quot;&gt;

&lt;h3&gt;Goals / Objectives&lt;/h3&gt;
After completing this workshop, you will:
&lt;ol&gt;
&lt;li&gt;Know what lidar data are and how they&#39;re used in science.&lt;/li&gt;
&lt;li&gt;Understand the key lidar data products - Digital Surface model, digitcal terrain model and canopy height model. &lt;/li&gt;
&lt;li&gt;know how to work with, analyze and export results of lidar derived rasters in R.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Before the Workshop Please&lt;/h3&gt;
&lt;p&gt;Download All Data Here&lt;/p&gt;

&lt;a href=&quot;##&quot; class=&quot;btn btn-success&quot;&gt; Eventual Download Data Link&lt;/a&gt;

&lt;p&gt;Install Packages using this script. Package list includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raster&lt;/li&gt;
&lt;li&gt;Sp &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&quot;background-materials&quot;&gt;Background Materials&lt;/h2&gt;
&lt;p&gt;Please read the following  materials prior to attending&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/GIS-Spatial-Data/Working-With-Rasters/&quot; title=&quot;Working with Rasters&quot;&gt;Working with Rasters: An overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/remote-sensing/1_About-LiDAR-Data-Light-Detection-and-Ranging_Activity1/&quot; title=&quot;About Lidar Data&quot;&gt;About Lidar Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/remote-sensing/2_LiDAR-Data-Concepts_Activity2//&quot; title=&quot;Lidar Derived Data Products - CHM, DEM, DSM&quot;&gt;3 Raster Lidar Derived Data Products: DEM, DSM, &amp;amp; CHM&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;schedule&quot;&gt;SCHEDULE&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Time&lt;/th&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;11:00&lt;/td&gt;
      &lt;td&gt;Brief Introduction to Raster Data&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11:10&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/R/Raster-Data-In-R&quot;&gt;Working with Rasters in R&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11:50&lt;/td&gt;
      &lt;td&gt;Brief Overview of Lidar Data &amp;amp; Lidar derived rasters&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12:00&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/remote-sensing/2_Lidar-Point-Cloud-Online-Data-Viz-Activity/&quot; title=&quot;Working With Lidar Point Clouds&quot;&gt;Explore with Lidar Point Clouds in a free online viewer: plas.io&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12:10&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/using-lidar-data/1_lidar_derived-data-products/&quot; title=&quot;Working with Lidar Rasters in R&quot;&gt;Working with Lidar Derived raster products in R&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12:50&lt;/td&gt;
      &lt;td&gt;Wrap-up, Feedback, Questions&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;To participate in the workshop, you will need working copies of the software described below. Please make sure to install everything (or at least to download the installers) before the start of the workshop.&lt;/p&gt;

&lt;h1 id=&quot;r&quot;&gt;R&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://cran.r-project.org/&quot;&gt;R&lt;/a&gt; is a programming language that specializes in statistical computing. It is a powerful tool for exploratory data analysis. To interact with R, we recommend, but do not require, &lt;a href=&quot;http://www.rstudio.com/&quot;&gt;RStudio&lt;/a&gt;, an interactive development environment (IDE). &lt;/p&gt;

&lt;h2 id=&quot;r-packages-to-install&quot;&gt;R Packages to Install&lt;/h2&gt;
&lt;p&gt;Please install the following packages prior to the workshop: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Raster - &lt;code&gt;install.packages(Raster)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sp - &lt;code&gt;install.packages(Sp)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DOWNLOAD &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The package installation script &lt;a href=&quot;https://github.com/NEONdps/neonESA2014/blob/master/packageInstallation.R&quot;&gt;here&lt;/a&gt;, &lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;http://trac.osgeo.org/gdal/wiki/DownloadingGdalBinaries&quot;&gt;gdal&lt;/a&gt; libraries, and &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;optional-resources&quot;&gt;Optional resources&lt;/h1&gt;

&lt;h2 id=&quot;qgis&quot;&gt;QGIS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.qgis.org/en/site/forusers/index.html#download&quot; target=&quot;_blank&quot;&gt;QGIS&lt;/a&gt; is a cross-platform Open Source Geographic Information system.&lt;/p&gt;

&lt;h2 id=&quot;online-lidar-data-viewer-las-viewer&quot;&gt;Online LiDAR Data Viewer (las viewer)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://plas.io&quot;&gt;http://plas.io&lt;/a&gt; is a Open Source LiDAR data viewer developed by Martin Isenberg of Las Tools and several of his colleagues.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/Data-Workshops/NEON-lidar-Rasters-R&quot;&gt;NEON Working With (Lidar Derived) Rasters in R&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 15, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[NEON Intro to HDF5 Workshop]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/Data-Workshops/NEON-HDF5-TimeSeries-In-R" />
  <id>http://localhost:4000/Data-Workshops/NEON-HDF5-p1</id>
  <published>2015-01-15T13:49:52-07:00</published>
  <updated>2015-01-15T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;h3 id=&quot;a-neon-data-carpentry-workshop&quot;&gt;A NEON Data Carpentry Workshop&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; Spring 2015&lt;/p&gt;

&lt;p&gt;This workshop will providing hands on experience with working hierarchical data formats(HDF5), and lidar data in R. It will also cover spatial data analysis in R.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lwasser.github.io/08-09-2015_NEON_ESA2015/about/&quot;&gt;Read Full Abstract Here.&lt;/a&gt;&lt;/p&gt;

&lt;div id=&quot;objectives&quot;&gt;

&lt;h3&gt;Goals / Objectives&lt;/h3&gt;
After completing this workshop, you will:
&lt;ol&gt;
&lt;li&gt;Know what the Hierarchical Data Format (HDF5) is.&lt;/li&gt;
&lt;li&gt;Know How to create and read from HDF5 files in R.&lt;/li&gt;
&lt;li&gt;Know how to read and visualization time series data stored in an HDF5 format.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Before the Workshop Please&lt;/h3&gt;
&lt;p&gt;Download All Data Here&lt;/p&gt;

&lt;a href=&quot;##&quot; class=&quot;btn btn-success&quot;&gt; Eventual Download Data Link&lt;/a&gt;

&lt;p&gt;Install Packages using this script. Package list includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GDAL&lt;/li&gt;
&lt;li&gt;RHDF5 &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&quot;schedule&quot;&gt;SCHEDULE&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Time&lt;/th&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th&gt;Instructor&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2:00&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/HDF5/About/&quot;&gt;What is HDF5?&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2:30&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/HDF5/Exploring-Data-HDFView/&quot; title=&quot;What is HDF5&quot;&gt;Explore an HDF5 File (HDFviewer)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3:00&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/HDF5/Create-HDF5-In-R/&quot; title=&quot;What is HDF5&quot;&gt;Create an HDF5 file in R&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Coffee&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4:00&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/HDF5/Explore-HDF5-Using-R/&quot; title=&quot;What is HDF5&quot;&gt;Working with and visualizating time series data in HDF5 format&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;??&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;To participate in the workshop, you will need working copies of the software described below. Please make sure to install everything (or at least to download the installers) before the start of the workshop.&lt;/p&gt;

&lt;h1 id=&quot;hdfview&quot;&gt;HDFView&lt;/h1&gt;

&lt;p&gt;Hierarchical Data Format 5 (HDF5) is a file format used to store, package, and simultaneously organize large quantities of related data. Although we will use R to analyze data stored in this format, HDFView is free-ware that allows for quick and easy viewing and editing of these files.&lt;/p&gt;

&lt;h1 id=&quot;r&quot;&gt;R&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://cran.r-project.org/&quot;&gt;R&lt;/a&gt; is a programming language that specializes in statistical computing. It is a powerful tool for exploratory data analysis. To interact with R, we recommend, but do not require, &lt;a href=&quot;http://www.rstudio.com/&quot;&gt;RStudio&lt;/a&gt;, an interactive development environment (IDE). &lt;/p&gt;

&lt;h2 id=&quot;r-packages-to-install&quot;&gt;R Packages to Install&lt;/h2&gt;
&lt;p&gt;We will use several packages, including &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bioconductor.org/packages/release/bioc/vignettes/rhdf5/inst/doc/rhdf5.pdf&quot;&gt;rhdf5&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cran.r-project.org/web/packages/rgdal/rgdal.pdf&quot;&gt;gdal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;others?? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DOWNLOAD &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The package installation script &lt;a href=&quot;https://github.com/NEONdps/neonESA2014/blob/master/packageInstallation.R&quot;&gt;here&lt;/a&gt;, &lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;http://trac.osgeo.org/gdal/wiki/DownloadingGdalBinaries&quot;&gt;gdal&lt;/a&gt; libraries, and &lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;http://www.hdfgroup.org/HDF5/release/obtain5.html&quot;&gt;hdf5&lt;/a&gt; libraries. &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;optional-resources&quot;&gt;Optional resources&lt;/h1&gt;

&lt;h2 id=&quot;qgis&quot;&gt;QGIS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.qgis.org/en/site/forusers/index.html#download&quot; target=&quot;_blank&quot;&gt;QGIS&lt;/a&gt; is a cross-platform Open Source Geographic Information system.&lt;/p&gt;

&lt;h2 id=&quot;online-lidar-data-viewer-las-viewer&quot;&gt;Online LiDAR Data Viewer (las viewer)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://plas.io&quot;&gt;http://plas.io&lt;/a&gt; is a Open Source LiDAR data viewer developed by Martin Isenberg of Las Tools and several of his colleagues.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/Data-Workshops/NEON-HDF5-TimeSeries-In-R&quot;&gt;NEON Intro to HDF5 Workshop&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 15, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[NEON Working With Hyperspectral Imagery in HDF5 Format (R)]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/Data-Workshops/NEON-HDF5-HyperspectralImagery-In-R" />
  <id>http://localhost:4000/Data-Workshops/NEON-HDF5-HSIImagery</id>
  <published>2015-01-15T13:49:52-07:00</published>
  <updated>2015-01-15T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;h3 id=&quot;a-neon-data-carpentry-workshop&quot;&gt;A NEON Data Carpentry Workshop&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; Spring 2015&lt;/p&gt;

&lt;p&gt;This workshop will providing hands on experience with working with hyperspectral imagery in hierarchical data formats(HDF5), in R. It will also cover raster data analysis in R.&lt;/p&gt;

&lt;div id=&quot;objectives&quot;&gt;

&lt;h3&gt;Goals / Objectives&lt;/h3&gt;
After completing this workshop, you will:
&lt;ol&gt;
&lt;li&gt;Know what the hyperspectral remote sensing data are&lt;/li&gt;
&lt;li&gt;Know How to create and read from HDF5 files containing spatial data in R.&lt;/li&gt;
&lt;li&gt;Know they key attributes of raster data that you need to spatially locate raster data in R.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Before the Workshop Please&lt;/h3&gt;
&lt;p&gt;Download All Data Here&lt;/p&gt;

&lt;a href=&quot;##&quot; class=&quot;btn btn-success&quot;&gt; Eventual Download Data Link&lt;/a&gt;

&lt;p&gt;Install Packages using this script. Package list includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GDAL&lt;/li&gt;
&lt;li&gt;RHDF5 &lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;

&lt;h2 id=&quot;schedule&quot;&gt;SCHEDULE&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Time&lt;/th&gt;
      &lt;th&gt;Topic&lt;/th&gt;
      &lt;th&gt;Instructor&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2:00&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/GIS-Spatial-Data/Working-With-Rasters/&quot;&gt;Working with Rasters - general overview&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2:30&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/R/Raster-Data-In-R/&quot; title=&quot;What is HDF5&quot;&gt;Raster Data in R - the skinny&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3:00&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/HDF5/About-Hyperspectral-Remote-Sensing-Data/&quot; title=&quot;What is HDF5&quot;&gt;about Hyperspectral Remote Sensing Data&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4:00&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;HDF5/Imaging-Spectroscopy-HDF5-In-R/&quot; title=&quot;What is HDF5&quot;&gt;Working with Hyperspectral Remote Sensing Data in R - P1&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;??&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4:00&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/HDF5/Create-Raster-Stack-Spectroscopy-HDF5-In-R/&quot; title=&quot;What is HDF5&quot;&gt;Raster Stacks in R - Working with Hyperspectral Remote Sensing Data&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;To participate in the workshop, you will need working copies of the software described below. Please make sure to install everything (or at least to download the installers) before the start of the workshop.&lt;/p&gt;

&lt;h1 id=&quot;hdfview&quot;&gt;HDFView&lt;/h1&gt;

&lt;p&gt;Hierarchical Data Format 5 (HDF5) is a file format used to store, package, and simultaneously organize large quantities of related data. Although we will use R to analyze data stored in this format, HDFView is free-ware that allows for quick and easy viewing and editing of these files.&lt;/p&gt;

&lt;h1 id=&quot;r&quot;&gt;R&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://cran.r-project.org/&quot;&gt;R&lt;/a&gt; is a programming language that specializes in statistical computing. It is a powerful tool for exploratory data analysis. To interact with R, we recommend, but do not require, &lt;a href=&quot;http://www.rstudio.com/&quot;&gt;RStudio&lt;/a&gt;, an interactive development environment (IDE). &lt;/p&gt;

&lt;h2 id=&quot;r-packages-to-install&quot;&gt;R Packages to Install&lt;/h2&gt;
&lt;p&gt;We will use several packages, including &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bioconductor.org/packages/release/bioc/vignettes/rhdf5/inst/doc/rhdf5.pdf&quot;&gt;rhdf5&lt;/a&gt; &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cran.r-project.org/web/packages/rgdal/rgdal.pdf&quot;&gt;gdal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;others?? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DOWNLOAD &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The package installation script &lt;a href=&quot;https://github.com/NEONdps/neonESA2014/blob/master/packageInstallation.R&quot;&gt;here&lt;/a&gt;, &lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;http://trac.osgeo.org/gdal/wiki/DownloadingGdalBinaries&quot;&gt;gdal&lt;/a&gt; libraries, and &lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;http://www.hdfgroup.org/HDF5/release/obtain5.html&quot;&gt;hdf5&lt;/a&gt; libraries. &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;optional-resources&quot;&gt;Optional resources&lt;/h1&gt;

&lt;h2 id=&quot;qgis&quot;&gt;QGIS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.qgis.org/en/site/forusers/index.html#download&quot; target=&quot;_blank&quot;&gt;QGIS&lt;/a&gt; is a cross-platform Open Source Geographic Information system.&lt;/p&gt;

&lt;h2 id=&quot;online-lidar-data-viewer-las-viewer&quot;&gt;Online LiDAR Data Viewer (las viewer)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://plas.io&quot;&gt;http://plas.io&lt;/a&gt; is a Open Source LiDAR data viewer developed by Martin Isenberg of Las Tools and several of his colleagues.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/Data-Workshops/NEON-HDF5-HyperspectralImagery-In-R&quot;&gt;NEON Working With Hyperspectral Imagery in HDF5 Format (R)&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 15, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[About Hyperspectral Remote Sensing Data]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/HDF5/About-Hyperspectral-Remote-Sensing-Data/" />
  <id>http://localhost:4000/HDF5/About-Hyperspectral-Remote-Sensing-Data</id>
  <published>2015-01-15T13:49:52-07:00</published>
  <updated>2015-01-15T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#about-hyperspectral-remote-sensing-data&quot;&gt;About Hyperspectral Remote Sensing Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#key-metadata-for-hyperspectral-data&quot;&gt;Key Metadata for Hyperspectral Data&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#spectral-resolution&quot;&gt;Spectral Resolution&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#full-width-half-max-fwhm&quot;&gt;Full Width Half Max (FWHM)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;div id=&quot;objectives&quot;&gt;
NOTE: this page is under development! We welcome any and all feedback!
&amp;gt; 
&lt;h3&gt;Goals / Objectives&lt;/h3&gt;

After completing this activity, you will:
&lt;ol&gt;
&lt;li&gt;Understand the fundamental principles of hyperspectral remote sensing data.&lt;/li&gt;
&lt;li&gt;Understand the key attributes that are required to effectively work with hyperspectral remote sensing data in tools like R or Python&lt;/li&gt;
&lt;li&gt;Know what a band is.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;You will need:&lt;/h3&gt;
A working thinking cap. This is an overview / background activity.
Please consider reading the post on working with rasters prior to reading this post. 
&lt;/div&gt;

&lt;h2 id=&quot;about-hyperspectral-remote-sensing-data&quot;&gt;About Hyperspectral Remote Sensing Data&lt;/h2&gt;

&lt;p&gt;The electromagnetic spectrum is composed of thousands of bands representing different types of light energy. Imaging spectrometers (instruments that collect hyperspectral data) break the electromagnetic spectrum into groups of bands that support classification of objects by their spectral properties on the earth’s surface. Hyperspectral data consists of many bands - up to hundreds of bands - that cover the electromagnetic spectrum.&lt;/p&gt;

&lt;p&gt;The NEON imaging spectrometer (NIS) collects data within the 380nm to 2510nm portions of the electromagnetic spectrum within bands that are approximately 5nm in width. This results in a hyperspectral data cube that contains approximately 426 bands - which means BIG DATA.&lt;/p&gt;

&lt;h1 id=&quot;key-metadata-for-hyperspectral-data&quot;&gt;Key Metadata for Hyperspectral Data&lt;/h1&gt;

&lt;h3 id=&quot;bands-and-wavelengths&quot;&gt;Bands and Wavelengths&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;band&lt;/em&gt; represents a group of wavelengths. For example, the wavelength values between 800nm and 805nm might be one band as captured by an imaging spectrometer. The imaging spectrometer collects reflected light energy in a pixel for light in that band. Often when you work with a multi or hyperspectral dataset, the band information is reported as the center wavelength value. This value represents the center point value of the wavelengths represented in that  band. Thus in a band spanning 800-805 nm, the center would be 802.5).&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/hyperspectral/spectrumZoomed.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/spectrumZoomed.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Imaging spectrometers collect reflected light information within defined bands or regions of the electromagnetic spectrum.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;spectral-resolution&quot;&gt;Spectral Resolution&lt;/h2&gt;
&lt;p&gt;The spectral resolution of a dataset that has more than one band, refers to the width of each band in the dataset. In the example above, a band was defined as spanning 800-805nm. The width or Spatial Resolution of the band is thus 5 nanometers. To see an example of this, check out the band widths for the &lt;a href=&quot;http://landsat.usgs.gov/band_designations_landsat_satellites.php&quot; target=&quot;_blank&quot;&gt;Landsat sensors&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;full-width-half-max-fwhm&quot;&gt;Full Width Half Max (FWHM)&lt;/h2&gt;
&lt;p&gt;The full width half max (FWHM) will also often be reported in a multi or hyperspectral dataset. This value represents the spread of the band around that center point. &lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/hyperspectral/FWHM2.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/FWHM2.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;The Full Width Half Max (FWHM) of a band relates to the distance in nanometers between the band center and the edge of the band. In this case, the FWHM for Band C is 2.5 nm.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This means that a band that covers 800 nm-805 nm might have a FWHM of 2.5 nm. While a general spectral resolution of the sensor is often  provided, not all sensors create bands of uniform widths. For instance bands 1-9 of Landsat 8 are listed below:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Band&lt;/th&gt;
      &lt;th&gt;Wavelength range&lt;/th&gt;
      &lt;th&gt;Spatial Resolution&lt;/th&gt;
      &lt;th&gt;Spectral Width&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Band 1 - Coastal aerosol&lt;/td&gt;
      &lt;td&gt;0.43 - 0.45&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0.02 nm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Band 2 - Blue&lt;/td&gt;
      &lt;td&gt;0.45 - 0.51&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0.06 nm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Band 3 - Green&lt;/td&gt;
      &lt;td&gt;0.53 - 0.59&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0.06 nm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Band 4 - Red&lt;/td&gt;
      &lt;td&gt;0.64 - 0.67&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0.03 nm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Band 5 - Near Infrared (NIR)&lt;/td&gt;
      &lt;td&gt;0.85 - 0.88&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0.03 nm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Band 6 - SWIR 1&lt;/td&gt;
      &lt;td&gt;1.57 - 1.65&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0.08 nm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Band 7 - SWIR 2&lt;/td&gt;
      &lt;td&gt;2.11 - 2.29&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0.18 nm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Band 8 - Panchromatic&lt;/td&gt;
      &lt;td&gt;0.50 - 0.68&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;0.18 nm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Band 9 - Cirrus&lt;/td&gt;
      &lt;td&gt;1.36 - 1.38&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0.02 nm&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Above: Source - landsat.usgs.gov&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/HDF5/About-Hyperspectral-Remote-Sensing-Data/&quot;&gt;About Hyperspectral Remote Sensing Data&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 15, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Intro to Working with Hyperspectral Remote Sensing Data in HDF5 Format in R]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/HDF5/Imaging-Spectroscopy-HDF5-In-R/" />
  <id>http://localhost:4000/HDF5/Working-With-Hyperspectral-Data-In-R</id>
  <published>2015-01-14T13:49:52-07:00</published>
  <updated>2015-01-14T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#about-hyperspectral-remote-sensing-data&quot;&gt;About Hyperspectral Remote Sensing Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#about-this-activity&quot;&gt;About This Activity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#read-hdf5-data-into-r&quot;&gt;1. Read HDF5 data into R&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#create-a-georeferenced-raster&quot;&gt;2. Create a Georeferenced Raster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;div id=&quot;objectives&quot;&gt;
&lt;strong&gt;R Skill Level:&lt;/strong&gt; Intermediate

&lt;h3&gt;Goals / Objectives&lt;/h3&gt;
After completing this activity, you will:
&lt;ol&gt;
&lt;li&gt;Understand how HDF5 data can be used to store spatial data and the associated benefits of this format when working with large spatial data cubes.&lt;/li&gt;
&lt;li&gt;Know how to extract metadata from HDF5 files.&lt;/li&gt;
&lt;li&gt;Know how to slice or subset HDF5 data. You will extract one band of pixels. &lt;/li&gt;
&lt;li&gt;Know how to plot a matrix as an image and a raster.&lt;/li&gt;
&lt;li&gt;Know how to export a final Geotiff (spatially projected) that can be used both in further analysis and in common GIS tools like QGIS.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What you&#39;ll Need&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R or R studio to write your code.&lt;/li&gt;
&lt;li&gt;The latest version of RHDF5 packag for R.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Data to Download&lt;/h3&gt;
&lt;a href=&quot;http://neonhighered.org/Data/HDF5/SJER_140123_chip.h5&quot; class=&quot;btn btn-success&quot;&gt; DOWNLOAD the NEON Imaging Spectrometer Data (HDF5) Format&lt;/a&gt;. 
&lt;p&gt;The data in this HDF5 file were collected over the San Joachim field site located in California (NEON Domain 17) and processed at NEON headquarters. The entire dataset can be accessed &lt;a href=&quot;http://neoninc.org/data-resources/get-data/airborne-data&quot; target=&quot;_blank&quot;&gt;by request from the NEON website.&lt;/a&gt;
&lt;/p&gt;  
&lt;/div&gt;

&lt;h2 id=&quot;about-hyperspectral-remote-sensing-data&quot;&gt;About Hyperspectral Remote Sensing Data&lt;/h2&gt;

&lt;p&gt;The electromagnetic spectrum is composed of thousands of bands representing different types of light energy. Imaging spectrometers (instruments that collect hyperspectral data) break the electromagnetic spectrum into groups of bands that support classification of objects by their spectral properties on the earth’s surface. Hyperspectral data consists of many bands - up to hundreds of bands - that cover the electromagnetic spectrum.&lt;/p&gt;

&lt;p&gt;The NEON imaging spectrometer (NIS) collects data within the 380 nm to 2510 nm portions of the electromagnetic spectrum within bands that are approximately 5 nm in width. This results in a hyperspectral data cube that contains approximately 428 bands - which means BIG DATA. &lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/hyperspectral/DataCube.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/DataCube.png&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;A data cube of NEON hyperspectral data. Each layer in the cube represents a band.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The HDF5 data model natively compresses data stored within it (makes it smaller) and supports data slicing (extracting only the portions of the data that you need to work with rather than reading the entire dataset into memory). These features in addition to the ability to support spatial data and associated metadata make it ideal for working with large data cubes such as those generated by imaging spectrometers.&lt;/p&gt;

&lt;h2 id=&quot;about-this-activity&quot;&gt;About This Activity&lt;/h2&gt;
&lt;p&gt;In this activity we will explore reading and extracting spatial raster data stored within a HDF5 file using &lt;code&gt;R&lt;/code&gt;. Please be sure that you have &lt;em&gt;atleast&lt;/em&gt; version 2.10 of &lt;code&gt;rhdf5&lt;/code&gt; installed. Use: &lt;code&gt;packageVersion(&quot;rhdf5&quot;)&lt;/code&gt; to check the package version. If you need to update &lt;code&gt;rhdf5&lt;/code&gt;, use the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source(&quot;http://bioconductor.org/biocLite.R&quot;)
biocLite(&quot;rhdf5&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip:&lt;/strong&gt; To update all packages installed in &lt;code&gt;R&lt;/code&gt;, use &lt;code&gt;update.packages()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;read-hdf5-data-into-r&quot;&gt;1. Read HDF5 data into R&lt;/h2&gt;
&lt;p&gt;We will use the &lt;code&gt;raster&lt;/code&gt; and &lt;code&gt;rhdf5&lt;/code&gt; packages to read in the HDF5 file that contains hyperspectral data for the &lt;a href=&quot;http://neoninc.org/science-design/field-sites/san-joaquin&quot; target=&quot;_blank&quot;&gt;NEON San Joaquin field site&lt;/a&gt;. Let’s start by calling the needed libraries and reading in our NEON HDF5 file.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#r Load `raster` and `rhdf5` packages and read NIS data into R
library(raster)
library(rhdf5)
library(rgdal)
#load our file 
f &amp;lt;- &#39;/path/to/your/data/SJER_140123_chip.h5&#39;
#look at the HDF5 file structure 
h5ls(f,all=T)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you look at the structure of the data, take note of the &lt;code&gt;map info dataset&lt;/code&gt;, the &lt;code&gt;spatial info&lt;/code&gt; group, and the &lt;code&gt;wavelengths&lt;/code&gt; and &lt;code&gt;reflectance&lt;/code&gt; datasets. The &lt;code&gt;spatial info&lt;/code&gt; folder contains the spatial attributes of the data including its Coordinate Reference System (CRS). The CRS documents how the data are physically location on the earth. The &lt;code&gt;wavelengths&lt;/code&gt; dataset contains the middle wavelength values for each band in the data. The reflectance dataset contains the image data that we will use for both data processing and visualization. &lt;/p&gt;

&lt;p&gt;More Information on raster metadata:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://neondataskills.org/HDF5/Working-With-Rasters/&quot; title=&quot;Key Attributes of Raster Data&quot;&gt;Metadata to understand when working with raster data&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://neondataskills.org/HDF5/About-Hyperspectral-Remote-Sensing-Data/&quot; title=&quot;Key Attributes of Raster Data&quot;&gt;Metadata and importa concepts associated with multi-band (multi and hyperspectral) rasters&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip - HDF5 Structure:&lt;/strong&gt; Note that the structure of individual HDF5 files may vary depending on who produced the data. In this case, the Wavelength and reflectance data within the file are both datasets. However the spatial information is contained within a group. Data downloaded from another organization like NASA, may look different. This is why it’s important to explore the data before diving into using it!&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;h5readAttributes&lt;/code&gt; function to read and extract metadata from the HDF5 file. Let’s start by reading in the spatial information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#r get spatial info and map info using the h5readAttributes function 
#notes - this function was developed by the infamous Ted Hart.
spinfo &amp;lt;- h5readAttributes(f,&quot;spatialInfo&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, let’s read in the wavelength center associated with each band in the HDF5 file. Which wavelength is band 19 associated with? (hint: look at the wavelengths vector that we just imported and check out the data located at index 19 - &lt;code&gt;wavelengths[19]&lt;/code&gt;).&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/hyperspectral/bluelight.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/bluelight.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;472 nanometers falls within the blue portion of the electromagnetic spectrum.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Band 19 has a associate wavelength center or 0.47244 which is in micrometers. This value equates to 472.44 nanometers (nm) which is in the visible blue portion of the electromagnetic spectrum (~ 400-700 nm). &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#get shape of the wavelength dataset (how many bands in the data?)
#get the dimensions of the wavelengths dataset in the H5 file
shapeWave&amp;lt;-dim(h5read(f,&quot;wavelength&quot;))
#read in the wavelength information from the Hdf5 file
wavelengths&amp;lt;- h5read(f,&quot;wavelength&quot;,index=list(1:shapeWave[1],shapeWave[2]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip: Bands and Wavelengths&lt;/strong&gt; A &lt;em&gt;band&lt;/em&gt; represents a group of wavelengths. For example, the wavelength values between 800nm and 805nm might be one band as captured by an imaging spectrometer. The imaging spectrometer collects reflected light energy in a pixel for light in that band. Often when you work with a multi or hyperspectral dataset, the band information is reported as the center wavelength value. This value represents the center point value of the wavelengths represented in that  band. Thus in a band spanning 800-805 nm, the center would be 802.5 nm). The full width half max (FWHM) will also be reported. This value represents the spread of the band around that center point. So, a band that covers 800 nm-805 nm might have a FWHM of 2.5 and a wavelength value of 802.5. &lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/hyperspectral/spectrumZoomed.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/spectrumZoomed.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Bands represent a range of values (types of light) within the electromagnetic spectrum. Values for each band are often represented as the center point value of each band.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The HDF5 dataset that we are working with in this activity contains more information than we need to work with. For example, we don’t necessarily need to process all 426 bands - if we are interested in creating a product like NDVI which only users bands in the near infra-red and red portions of the spectrum. Or we might only be interested in a spatial subset of the data - perhaps a region where we have plots in the field.&lt;/p&gt;

&lt;p&gt;The HDF5 format allows us to slice (or subset) the data - quickly extracting the subset that we need to process. Let’s extract one of the green bands in our dataset - band 34. By the way - what is the center wavelength value associated with band 34? hint &lt;code&gt;wavelengths[34]&lt;/code&gt;. How do we know this band is a green band in the visible portion of the spectrum?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#get the dimensions of the reflectance dataset in the H5 file
shapeRefl&amp;lt;-dim(h5read(f,&quot;Reflectance&quot;))
#Extract or &quot;slice&quot; data for band 34 from the HDF5 file
b34&amp;lt;- h5read(f,&quot;Reflectance&quot;,index=list(1:shapeRefl[1],1:shapeRefl[2],34))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;a-note-about-data-slicing-in-hdf5&quot;&gt;A Note About Data Slicing in HDF5&lt;/h3&gt;
&lt;p&gt;Data slicing allows us to extract and work with subsets of the data rather than reading in the entire dataset into memory. Thus, in this case, we can extract and plot the green band without reading in all 426 bands of information. The ability to slice large datasets, makes HDF5 ideal for working with big data. 	&lt;/p&gt;

&lt;p&gt;Next, let’s convert our data from an array (more than 2 dimensions) to a matrix (just 2 dimensions). We need to have our data in a matrix format to plot it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Convert from array to matrix
b34 &amp;lt;- b34[,,1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip: Arrays vs. Matrices&lt;/strong&gt; Arrays are matrices with more than 2 dimensions. When we say dimension, we are talking about the “z” associated with the data (imagine a series of tabs in a spreadsheet). Put the other way: matrices are arrays with only 2 dimensions. Arrays can have any number of dimensions one, two, ten or more. &lt;/p&gt;

&lt;p&gt;Here is a matrix that is 4 x 3 in size (4 rows and 3 columns):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Metric&lt;/th&gt;
      &lt;th&gt;species 1&lt;/th&gt;
      &lt;th&gt;species 2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;total number&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;average weight&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;average length&lt;/td&gt;
      &lt;td&gt;2.4&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;average height&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip: Dimensions in Arrays&lt;/strong&gt; An array contains 1 or more dimensions in the “z” direction. For example, let’s say that we collected this same set of species data for every day in a 30 day month. We might then have a matrix like the one above for each day for a total of 30 days making a 4 x 3 x 30 array (this dataset has more than 2 dimensions). More on R object types &lt;a href=&quot;http://www.statmethods.net/input/datatypes.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/R/matrix.png&quot;&gt;&lt;img src=&quot;/images/R/matrix.png&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/R/array.png&quot;&gt;&lt;img src=&quot;/images/R/array.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Right: a matrix has only 2 dimensions. Left: an array has more than 2 dimensions.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Next, let’s look at the metadata for the reflectance data. When we do this, take note of 1) the scale factor and 2) the data ignore value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# look at the metadata for the reflectance dataset
h5readAttributes(f,&quot;Reflectance&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s plot the band 34 data. Plotting spatial data as a visual “data check” is a good idea to make sure processing is being performed correctly and all is well with the image. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;image(log(b34))
#note - when R brings in the matrix, the dimensions are read in reverse order
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What do you notice about the image? It’s a bit dark and lacking any detail. What could be causing this? Let’s look at the distribution of reflectance values in our data to figure out what is going on.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Plot range of reflectance values as a histogram to view range
#and distribution of values.
hist(b34,breaks=40,col=&quot;darkmagenta&quot;)
#View values between 0 and 5000
hist(b34,breaks=40,col=&quot;darkmagenta&quot;,xlim = c(0, 5000))
hist(b34, breaks=40,col=&quot;darkmagenta&quot;,xlim = c(5000, 15000),ylim=c(0,100))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you’re examining the histograms above, keep in mind that reflectance values range between 0-1. The &lt;strong&gt;data scale factor&lt;/strong&gt; in the metadata tells us to divide all reflectance values by 10,000. Thus, a value of 5,000 equates to a reflectance value of 0.50. Storing data as integers (without decimal places) compared to floating points (with decimal places) creates a smaller file. You will see this done often when working with remote sensing data.  &lt;/p&gt;

&lt;p&gt;Notice in the data that there are some larger reflectance values (&amp;gt;5,000) that represent a smaller number of pixels. These pixels are skewing how the image renders.   &lt;/p&gt;

&lt;p&gt;Remember that the metadata for the &lt;code&gt;Reflectance&lt;/code&gt; dataset designated 15,000 as &lt;code&gt;data ignore value&lt;/code&gt;. Thus, let’s set all pixels with a value &amp;gt; 14,999 to &lt;code&gt;NA&lt;/code&gt; (no value). If we do this, R won’t try to render these pixels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;b34[b34 = 15000] &amp;lt;- NA
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip: Data Ignore Value&lt;/strong&gt; Image data in raster format will often contain a data ignore value and a scale factor. The data ignore value represents pixels where there are no data. Among other causes, no data values may be attributed to the sensor not collecting data in that area of the image or to processing results which yield null values. &lt;/p&gt;

&lt;p&gt;Our image still looks dark because R is trying to render all reflectance values between 0 and 14999 as if they were distributed equally in the histogram. However we know they are not distributed equally. There are many more values between 0-5000 then there are values &amp;gt;5000. The proper way to adjust our data would be what’s called an &lt;code&gt;image stretch&lt;/code&gt;. We will learn how to stretch our image data, later. For now, let’s run a log on the pixel reflectance values to factor out those larger values. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;image(log(b34))
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip: Reflectance Values and Image Stretch&lt;/strong&gt; Images have a distribution of reflectance values. A typical image viewing program will render the values by distributing the entire range of reflectance values  across a range of “shades” that the monitor can render - between 0 and 255. However, often the distribution of reflectance values is not linear. For example, in the case of ur data, most of the reflectance values fall between 0 and 0.5. Yet there are a few values &amp;gt;1 that are heavily impacting the way the image is drawn on our monitor. Imaging processing programs like ENVI, QGIS and ArcGIS (and even Adobe Photoshop) allow you to adjust the stretch of the image. This is similar to adjusting the contrast and brightness in Photoshop. Read more about this topic: &lt;a href=&quot;http://www.r-s-c-c.org/node/241&quot; target=&quot;_blank&quot;&gt;About Image Stretch - RSCC&lt;/a&gt; and another link that discusses image stretch &lt;a href=&quot;http://www.r-s-c-c.org/node/240&quot; target=&quot;_blank&quot;&gt;Read more about linear image stretch discussion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The log applied to our image increases the contrast making it look more like an image. However, look at the images below. The top one is what our log adjusted image looks like when plotted. The bottom on is an RGB version of the same image. Notice a difference? &lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/images/hyperspectral/RGBImage_2.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/RGBImage_2.png&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/hyperspectral/SJER_Flipped.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/SJER_Flipped.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;LEFT: the image as it should look. RIGHT: the image that we outputted from the code above. Notice a difference?&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;#We need to transpose x and y values in order for our final image to plot properly
b34&amp;lt;-t(b34)
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip: Transpose&lt;/strong&gt; in HDF5 view, notice that there are three data dimensions for this file: Bands x Rows x Columns. However, when R reads in the dataset, it reads them as: Columns x Bands x Rows. The data are flipped. We can quickly transpose the data to correct for this using the &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;transpose&lt;/code&gt; command in &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The orientation is rotated in our log adjusted image. This is because &lt;code&gt;R&lt;/code&gt; reads in matrices starting from the upper left hand corner. Whereas, most rasters read pixels starting from the lower left hand corner. In the next section, we will deal with this issue by creating a proper georeferenced (spatiall located) raster in R. The raster format will read in pixels following the same methods as other GIS and imaging processing software like QGIS and ENVI do.&lt;/p&gt;

&lt;h2 id=&quot;create-a-georeferenced-raster&quot;&gt;2. Create a Georeferenced Raster&lt;/h2&gt;
&lt;p&gt;Next, we will create a proper raster using the &lt;code&gt;b34&lt;/code&gt; matrix. The raster format will allow us to define and manage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Image stretch&lt;/li&gt;
  &lt;li&gt;Coordinate reference system / spatial reference&lt;/li&gt;
  &lt;li&gt;Resolution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will also account for the orientation issue discussed above.&lt;/p&gt;

&lt;p&gt;To create a raster in R, we need a few pieces of information, including: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The coordinate reference system (CRS)&lt;/li&gt;
  &lt;li&gt;The location of the first pixel (located in the lower left hand corner of the raster). &lt;/li&gt;
  &lt;li&gt;The resolution or size of each pixel in the data. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First let’s grab the spatial information that we need from the HDF5 file. The CRS and associated information that is needed is stored in the &lt;code&gt;map info&lt;/code&gt; dataset. The map info string looks something like this: &lt;code&gt;&quot;UTM,1.000,1.000,256521.000,4112571.000,1.000000e+000,&lt;/code&gt;
&lt;code&gt;1.000000e+000,11,North,WGS-84,units=Meters&quot; &lt;/code&gt;. Notice that this information is separated by commas. We can use the &lt;code&gt;strsplit&lt;/code&gt; command in R to extract each element into a vector. The elements are position 4 and 5 represent the lower left hand corner of the raster. We need this information to define the raster’s extent.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Populate the raster image extent value. 
#get the map info, split out elements
mapInfo&amp;lt;-h5read(f,&quot;map info&quot;)
#Extract each element of the map info information 
#so we can extract the lower left hand corner coordinates.
mapInfo&amp;lt;-unlist(strsplit(mapInfo, &quot;,&quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we define the extents of our raster. The extents will be used to calculate the raster’s resolution. The lower left hand corner is located at mapInfo[4:5]. We can define the final raster dataset extent by adding the number of rows to the Y lower left hand corner coordinate and the number of columns in the &lt;code&gt;Reflectance&lt;/code&gt; dataset to the X lower left hand corner coordinate.   &lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;/images/hyperspectral/sat_image_lat_lon.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/sat_image_lat_lon.png&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;The extent of a raster represents the spatial location of each corner. The coordinate units will be determined by the spatial projection / coordinate reference system that the data are in. Learn more by clicking on the link below. &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://neondataskills.org/HDF5/Working-With-Rasters/&quot;&gt;Learn more about raster attributes including extent, and coordinate reference systems here.&lt;/a&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define extents of the data using metadata and matrix attributes
xMN=as.numeric(mapInfo[4])
xMX=(xMN+(ncol(b34)))
yMX=as.numeric(mapInfo[5]) 
yMN=(yMN-(nrow(b34)))     
rasExt &amp;lt;- extent(xMN,xMX,yMN,yMX)

#define final raster with projection info 
#note that capitalization will throw errors on a MAC.
#if UTM is all caps it might cause an error!
b34r&amp;lt;-raster(b34, 
        crs=(spinfo$projdef))

#assign the spatial extent to the raster
extent(b34r) &amp;lt;- rasExt
#look at raster attributes
b34r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve now created a raster from band 34 reflectance data. We can plot that data if we want using the &lt;code&gt;plot&lt;/code&gt; command. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;writeRaster(b34r,file=&quot;band34.tif&quot;,overwrite=TRUE)
#we&#39;re done with the H5 file - 
#close the H5 file
H5close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;extra-credit&quot;&gt;Extra Credit&lt;/h3&gt;
&lt;p&gt;If you get done early, experiment with &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Creating rasters from other bands in the dataset.&lt;/li&gt;
  &lt;li&gt;Varying the distribution of values in the image to mimic an image stretch. e.g. &lt;code&gt;b34[b34 &amp;gt; 6000 ] &amp;lt;- 1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/HDF5/Imaging-Spectroscopy-HDF5-In-R/&quot;&gt;Intro to Working with Hyperspectral Remote Sensing Data in HDF5 Format in R&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 14, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Creating a Raster Stack from Hyperspectral Imagery in HDF5 Format in R]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/HDF5/Create-Raster-Stack-Spectroscopy-HDF5-In-R/" />
  <id>http://localhost:4000/HDF5/Creating-RasterStacks-RGB-Images-From-Hyperspectral_Remote_Sensing_Data</id>
  <published>2015-01-13T13:49:52-07:00</published>
  <updated>2015-01-13T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#about-this-activity&quot;&gt;About This Activity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-a-raster-stack-in-r&quot;&gt;1. Creating a Raster Stack in R&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#plotting-our-data-on-a-map&quot;&gt;2. Plotting our data on a map.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#raster-math---creating-ndvi-and-other-vegetation-indices-in-r&quot;&gt;3. Raster Math - Creating NDVI and other Vegetation Indices in R&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extra-credit&quot;&gt;Extra Credit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;div id=&quot;objectives&quot;&gt;
&lt;strong&gt;R Skill Level:&lt;/strong&gt; Intermediate

&lt;h3&gt;Goals / Objectives&lt;/h3&gt;
After completing this activity, you will:
&lt;ol&gt;
&lt;li&gt;Extract a &quot;slice&quot; of data from a hyperspectral data cube.&lt;/li&gt;
&lt;li&gt;Create a rasterstack in R which can then be used to create RGB images from bands in a hyperspectral data cube.&lt;/li&gt;
&lt;li&gt;Plot data spatially on a map.&lt;/li&gt;
&lt;li&gt;Create basic vegetation indices like NDVI using raster  based calculations in R.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What you&#39;ll Need&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;R or R studio to write your code.&lt;/li&gt;
&lt;li&gt;The latest version of RHDF5 package for R.&lt;/li&gt;
&lt;li&gt;Recommended Background: Consider reviewing the documentation for the &lt;a href=&quot;http://www.bioconductor.org/packages/release/bioc/manuals/rhdf5/man/rhdf5.pdf&quot; target=&quot;_blank&quot;&gt;RHDF5 libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Data to Download&lt;/h3&gt;
&lt;a href=&quot;http://neonhighered.org/Data/HDF5/SJER_140123_chip.h5&quot; class=&quot;btn btn-success&quot;&gt; DOWNLOAD the NEON Imaging Spectrometer Data (HDF5) Format&lt;/a&gt;. 
&lt;p&gt;The data in this HDF5 file were collected over the San Joachim field site located in California (NEON Domain 17) and processed at NEON headquarters. The entire dataset can be accessed &lt;a href=&quot;http://neoninc.org/data-resources/get-data/airborne-data&quot; target=&quot;_blank&quot;&gt;by request from the NEON website.&lt;/a&gt;
&lt;/p&gt;  

&lt;h3&gt;Pre-reqs&lt;/h3&gt;
&lt;p&gt;We highly recommend you work through the - Introduction to Working with hyperspectral data in R activity before moving on to this activity.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;about&quot;&gt;About&lt;/h2&gt;
&lt;p&gt;We often want to generate a 3 band image from multi or hyperspectral data. The most commonly recognized band combination is RGB which stands for Red, Green and Blue. RGB images are just like the images that your camera takes. But there are other band combinations that are useful too. For example, near infrared images emphasize vegetation and help us classify or identify where vegetation is located on the ground.&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
    &lt;a href=&quot;/images/hyperspectral/RGBImage_2.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/RGBImage_2.png&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/hyperspectral/NIR_G_B.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/NIR_G_B.png&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;/images/hyperspectral/falseColor.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/falseColor.png&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;SJER image using 3 different band combinations. Left: typical red, green and blue (bands 58,34,19), middle: color infrared: near infrared, green and blue (bands 90, 34, 19).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip - Band Combinations:&lt;/strong&gt; the Biodiversity Informatics group created a great interactive tool that lets you explore band combinations. Check it out:&lt;a href=&quot;http://biodiversityinformatics.amnh.org/interactives/bandcombination.php&quot; target=&quot;_blank&quot;&gt;Learn more about band combinations using a great online tool!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;about-this-activity&quot;&gt;About This Activity&lt;/h2&gt;
&lt;p&gt;In this activity, we will learn how to create multi (3) band images. We will also learn how to perform some basic raster calculations (known as raster math in the GIS world).&lt;/p&gt;

&lt;h2 id=&quot;creating-a-raster-stack-in-r&quot;&gt;1. Creating a Raster Stack in R&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;http://neondataskills.org/HDF5/Imaging-Spectroscopy-HDF5-In-R/&quot;&gt;previous activity&lt;/a&gt;, we exported a subset of the NEON Reflectance data from a HDF5 file. In this activity, we will create a full color image using 3 (red, green and blue - RGB) bands. We will follow many of the steps we followed in the &lt;a href=&quot;http://neondataskills.org/HDF5/Imaging-Spectroscopy-HDF5-In-R/&quot;&gt;intro to working with hyperspectral data activity&lt;/a&gt;. These steps included loading required packages, reading in our file and viewing the file structure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Load required packages
library(raster)
library(rhdf5)
#Read in H5 file
#f &amp;lt;- &#39;/Users/lwasser/Documents/Conferences/1_DataWorkshop_ESA2014/HDF5File/SJER_140123_chip.h5&#39;
f &amp;lt;- &#39;/Users/law/Documents/data/SJER_140123_chip.h5&#39;
#View HDF5 file structure 
h5ls(f,all=T)
#r get spatial info and map info using the h5readAttributes function developed by Ted Hart
spinfo &amp;lt;- h5readAttributes(f,&quot;spatialInfo&quot;)

#Populate the raster image extent value. 
#get the map info, split out elements
mapInfo&amp;lt;-h5read(f,&quot;map info&quot;)
mapInfo&amp;lt;-unlist(strsplit(mapInfo, &quot;,&quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll write a set of functions that will perform the processing that we did step by step in the &lt;a href=&quot;http://neondataskills.org/HDF5/Imaging-Spectroscopy-HDF5-In-R/&quot;&gt;intro to working with hyperspectral data activity&lt;/a&gt;. This will allow us to process multiple bands in bulk.&lt;/p&gt;

&lt;p&gt;The first function &lt;code&gt;getBandMat&lt;/code&gt; slices the HDF5 file, extracting the reflectance information for a specified band. It returns a matrix containing that band. To call this function, we would enter &lt;code&gt;getBandMat(fileObject, *BandNumber*)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#f: the hdf file
# band: the band you want to process
# returns: a matrix containing the reflectance data for the specific band
getBandMat &amp;lt;- function(f, band){
  	  out&amp;lt;- h5read(f,&quot;Reflectance&quot;,index=list(1:477,1:502,band))
  	  #Convert from array to matrix
  	  out &amp;lt;- (out[,,1])
  	  #transpose data to fix flipped row and column order 
  	  out &amp;lt;-t(out)
  #assign data ignore values to NA
  	  out[out &amp;gt; 14999] &amp;lt;- NA
  	  return(out)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next function, &lt;code&gt;band2rast&lt;/code&gt; takes the subsetted band matrix and creates a raster. It also calculates and sets both the raster extent and the CRS (coordinate reference system) for the raster. The call for this function would be &lt;code&gt;band2rast(fileObject, *BandNumber*)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;band2rast &amp;lt;- function(f,band){
  	  #define the raster including the CRS (taken from SPINFO)
  out &amp;lt;-  raster(getBandMat(f,band),crs=(spinfo$projdef))
  #define extents of the data using metadata and matrix attributes
  xMN=as.numeric(mapInfo[4])
  xMX=(xMN+(ncol(b34)))
  yMN=as.numeric(mapInfo[5]) 
  yMX=(yMN+(nrow(b34)))
  #set raster extent
  rasExt &amp;lt;- extent(xMN,xMX,yMN,yMX)
  #assign extent to raster
  extent(out) &amp;lt;- rasExt
  return(out)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last function, &lt;code&gt;stackList&lt;/code&gt; creates the final raster stack. A &lt;a href=&quot;http://www.inside-r.org/packages/cran/raster/docs/stack&quot; target=&quot;_blank&quot;&gt;raster stack&lt;/a&gt; is a set 1 or more rasters. If it contains multiple rasters, it uses a list which defines which bands (or dimensions in the Reflectance dataset) to grab and process. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## This function creates a stack of rasters from a list of rasters
stackList &amp;lt;- function(rastList){
  	  #add first raster to stack.
  	  masterRaster &amp;lt;- stack(rastList[[1]])
  	  #add additional layers to raster stack 
  	  for(i in 2:length(rastList)){
		masterRaster&amp;lt;-  addLayer(masterRaster,rastList[[i]])
  	  }
  	  return(masterRaster)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the functions are created, we can create our list of rasters. The list specifies which bands (or dimensions in our hyperspectral dataset) we want to include in our raster stack. Let’s start with a typical RGB (red, green, blue) combination. We will use bands 58, 34, and 19. &lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip - wavelengths and bands:&lt;/strong&gt; Remember that you can look at the wavelengths dataset to determine the center wavelength value for each band. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rgb &amp;lt;- list(58,34,19)
#lapply tells R to apply the function to each element in the list
rgb_rast &amp;lt;- lapply(rgb,band2rast, f = f)
#check out the properties or rgb_rast
#note that it displays properties of 3 rasters.
rgb_rast
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://www.r-bloggers.com/using-apply-sapply-lapply-in-r/&quot; target=&quot;_blank&quot;&gt;More about Lapply here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Next, add the names of the bands to the raster so we can easily keep track of the bands in the list.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#add the band numbers as names to each raster in the raster list
names(rgb_rast) &amp;lt;- as.character(rgb)
#check properties of the raster list - note the band names
rgb_rast
### Plot one raster in the list to make sure things look OK.
plot(rgb_rast[[1]])
#create a raster stack from the list
rgb_stack &amp;lt;- stackList(rgb_rast)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, let’s add the names of each band to our raster list. Then we can plot the bands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Add band names to each raster in the stack
bandNames=paste(&quot;Band_&quot;,unlist(rgb),sep=&quot;&quot;)
for (i in 1:length(rgb_rast) ) {
  	  names(rgb_stack)[i]=bandNames[i]
}
#plot the stack	
plot(rgb_stack)
plotRGB(rgb_stack,r=1,g=2,b=3, scale=300, stretch = &quot;Lin&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;plotRGB&lt;/code&gt; function allows you to combine three bands to create an image. &lt;a href=&quot;http://www.inside-r.org/packages/cran/raster/docs/plotRGB&quot; target=&quot;_blank&quot;&gt;More on plotRGB here.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#write out final raster	
#note - you should be able to bring this tiff into any GIS program!

writeRaster(rgb_stack,file=&quot;test6.tif&quot;,overwrite=TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip - False color and near infrared images:&lt;/strong&gt; Use the band combinations listed at the top of this page to modify the raster list. What type of image do you get when you change the band values?&lt;/p&gt;

&lt;p&gt;If you want to play around a bit with this – try plotting the RGB image using different bands. Here are some suggestions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Color Infrared / False Color: rgb: (90,34,19)&lt;/li&gt;
  &lt;li&gt;SWIR, NIR,Red Band – rgb (152,90,58)&lt;/li&gt;
  &lt;li&gt;False Color: – rgb (363,246,55)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More on Band Combinations: &lt;a href=&quot;http://gdsc.nlr.nl/gdsc/en/information/earth_observation/band_combinations&quot;&gt;http://gdsc.nlr.nl/gdsc/en/information/earth_observation/band_combinations&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;&lt;strong&gt;A note about image stretching:&lt;/strong&gt; 
Notice that the scale is set to 300 on the RGB image that we plotted above. We can adjust this number and notice that the image gets darker - or lighter.&lt;/p&gt;

&lt;h2 id=&quot;plotting-our-data-on-a-map&quot;&gt;2. Plotting our data on a map.&lt;/h2&gt;
&lt;p&gt;We can plot the location of our image on a map of the US. For this we’ll use the lower left coordinates of the raster, extracted from the SPINFO group. Note that these coordinates are in latitude and longitude (geographic coordinates) rather than UTM coordinates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Create a Map in R
library(maps)
map(database=&quot;state&quot;,region=&quot;california&quot;)
points(spinfo$LL_lat~spinfo$LL_lon,pch = 15)
#add title to map.
title(main=&quot;NEON Site Location in Southern California&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;raster-math---creating-ndvi-and-other-vegetation-indices-in-r&quot;&gt;3. Raster Math - Creating NDVI and other Vegetation Indices in R&lt;/h2&gt;
&lt;p&gt;In this last part, we will calculate some vegetation indices using raster math in R! We will start by creating NDVI or Normalized Difference Vegetation Index. &lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt; &lt;strong&gt;Data Tip - About NDVI:&lt;/strong&gt; NDVI is  a ratio between the near infrared (NIR) portion of the electromagnetic spectrum and the red portion of the spectrum. Please keep in mind that there are different ways to aggregate bands when using hyperspectral data. This example is using individual bands to perform the NDVI calculation. Using individual bands is not necessarily the best way to calculate NDVI from hyperspectral data! &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Calculate NDVI
#select bands to use in calculation (red, NIR)
ndvi_bands &amp;lt;- c(58,90)
#create raster list and then a stack using those two bands
ndvi_rast &amp;lt;- lapply(ndvi_bands,band2rast, f = f)
ndvi_stack &amp;lt;- stackList(ndvi_rast)
#calculate NDVI
NDVI &amp;lt;- function(x) {
  	  (x[,2]-x[,1])/(x[,2]+x[,1])
}
ndvi_calc &amp;lt;- calc(ndvi_stack,NDVI)
plot(ndvi_calc, main=&quot;NDVI for the NEON SJER Field Site&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;figure class=&quot;half&quot;&gt;
&lt;a href=&quot;/images/hyperspectral/NDVI.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/NDVI.png&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/hyperspectral/EVI.png&quot;&gt;&lt;img src=&quot;/images/hyperspectral/EVI.png&quot; /&gt;&lt;/a&gt;
    
&lt;figcaption&gt;LEFT: NDVI for the NEON SJER field site, created in R. RIGHT: EVI for the NEON SJER field site created in R.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;extra-credit&quot;&gt;Extra Credit&lt;/h2&gt;
&lt;p&gt;IF you get done early, try any of the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Calculate EVI using the following formula : EVI&amp;lt;- 2.5 * ((b4-b3) / (b4 + 6 * b3- 7.5*b1 + 1))&lt;/li&gt;
  &lt;li&gt;Calculate NDNI using the following equation: log(1/p1510)-log(1/p1680)/ log(1/p1510)+log(1/p1680)&lt;/li&gt;
  &lt;li&gt;Explore the bands in the hyperspectral data. What happens if you average reflectance values across multiple red and NIR bands and then calculate NDVI?&lt;/li&gt;
&lt;/ol&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/HDF5/Create-Raster-Stack-Spectroscopy-HDF5-In-R/&quot;&gt;Creating a Raster Stack from Hyperspectral Imagery in HDF5 Format in R&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 13, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Activity: Creating A Square Buffer Around a Plot Centroid in R]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/working-with-field-data/Field-Data-Polygons-From-Centroids" />
  <id>http://localhost:4000/working-with-field-data/Creating-Square-Plot-Boundaries-From-Centroids-in-R</id>
  <published>2015-01-05T13:49:52-07:00</published>
  <updated>2015-01-05T13:49:52-07:00</updated>
  <author>
    <name>NEON EDUCATION</name>
    <uri>http://localhost:4000</uri>
    <email>lwasser@neoninc.org</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#about-this-activity&quot;&gt;About This Activity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-you-need&quot;&gt;What You Need&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#review-how-to-install-packages&quot;&gt;REVIEW: How to Install Packages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#part-1---load-csv-setup-plots&quot;&gt;Part 1 - Load CSV, Setup Plots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#part-2---create-spatial-polygons&quot;&gt;Part 2 - Create Spatial Polygons&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#part-3---export-to-shapefile&quot;&gt;Part 3 - Export to Shapefile&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;h1 id=&quot;about-this-activity&quot;&gt;About This Activity&lt;/h1&gt;
&lt;p&gt;Sometimes we have a set of plot centroid (marking the center of a plot) values in x,y format. We need to derive the plot boundaries or edges of the plot, from the centroids. If the plot is a circle, we can generate the plot boundary using a buffer function in R or a GIS package. However, creating a SQUARE boundary around a centroid requires an alternate approach. This activity presents a way to create square polygons of a given radius (referring to half of the plots width), for each plot centroid location in a dataset.&lt;/p&gt;

&lt;p&gt;This activity requires a “.csv” (Comma Separated Value) file that contains the plot centroids in X,Y format and preferably some sort of unique plot ID. The data used in this activity were collected at the National Ecological Observatory Network field site in San Joaquin Experimental Range, California. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’d Like to Thank&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href=&quot;http://stackoverflow.com/users/489704/jbaums&quot; target=&quot;_blank&quot;&gt; jbaums&lt;/a&gt; from StackOverflow for helping with the SpatialPolygons code!&lt;/p&gt;

&lt;h1 id=&quot;what-you-need&quot;&gt;What You Need&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;R or RStudio&lt;/li&gt;
  &lt;li&gt;A functioning thinking cap&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data to Download:&lt;/strong&gt; The plot centroid csv located &lt;a href=&quot;http://lwasser.github.io/data/SJERPlotCentroids.csv&quot; title=&quot;Centroid data for SJER&quot;&gt;HERE&lt;/a&gt; (right click to download)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Required R Packages:&lt;/strong&gt; the sp and rgdal packages.&lt;/li&gt;
  &lt;li&gt;Quick Hint: You need to first install the sp and rgdal packages before calling them in your code. Make sure they are installed or else calling them as a library won’t work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;review-how-to-install-packages&quot;&gt;REVIEW: How to Install Packages&lt;/h2&gt;
&lt;p&gt;Use the code below to install the sp and rgdal packages. NOTE: you can just type this into the command line to install each package. Once a package is installed, you don’t have to install it again! &lt;a href=&quot;http://www.r-bloggers.com/installing-r-packages/&quot; target=&quot;_blank&quot;&gt;Read more about installing packages in R by R-bloggers.&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;‘sp’&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;‘rgdal’&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;part-1---load-csv-setup-plots&quot;&gt;Part 1 - Load CSV, Setup Plots&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#this code will create square &amp;quot;plots&amp;quot; of a user-defined radius from X,Y  centroids&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#first, load the sp and gdal libraries&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;sp&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;rgdal&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#be sure to set your working directory so you know where any code outputs are saved.&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;setwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/SET-YOUR-DIRECTORY-HERE/1_DataWorkshop_ESA2014/ESAWorkshop_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#Make sure character strings don&amp;#39;t import as factors&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;stringsAsFactors&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#read in the NEON plot centroid data (downloaded above - &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#SJERPlotCentroids.csv)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#make sure this file has been saved in your working directory&lt;/span&gt;
centroids &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SJERPlotCentroids.csv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next piece of code sets the radius for the plots. This radius is used to calculate the vertex locations that define the plot perimeter. In this case, we will use a radius of 20m to create a 40 m x 40 m square plot. Radius is in METERS given the data are in the UTM coordinate reference system (CRS).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#set the radius for the plots
radius &amp;lt;- 20 #radius in meters

#define the plot boundaries based upon the plot radius. 
#NOTE: this assumes that plots are oriented North and are not rotated. 
#If the plots are rotated, you&#39;d need to do additional math to find 
#the corners.
yPlus &amp;lt;- centroids$northing+radius
xPlus &amp;lt;- centroids$easting+radius
yMinus &amp;lt;- centroids$northing-radius
xMinus &amp;lt;- centroids$easting-radius
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we will extract each plot’s unique ID from the centroids csv file. We will associate the centroid plot ID with the plot perimeter polygon that we create below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Extract the plot ID information. NOTE: because we set
#stringsAsFactor to false above, we can import the plot 
#ID&#39;s using the code below. If we didn&#39;t do that, our ID&#39;s would 
#come in as factors by default. 
#We&#39;d thus have to use the code ID=as.character(centroids$Plot_ID) 
ID=centroids$Plot_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NOTE: When calculating the coordinates for the vertices, it is important to CLOSE the polygon. This means that a square will have 5 instead of 4 vertices. The fifth vertex is identical to the first vertex. Thus, by repeating the first vertex coordinate (xMinus,yPlus) the polygon will be closed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#calculate polygon coordinates for each plot centroid. 
square=cbind(xMinus,yPlus, xPlus,yPlus, xPlus,yMinus, xMinus,yMinus,xMinus,yPlus,xMinus,yPlus)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;part-2---create-spatial-polygons&quot;&gt;Part 2 - Create Spatial Polygons&lt;/h2&gt;
&lt;p&gt;Next, create Spatial Polygons. NOTE: this particular step is somewhat confusing. Please consider reading up on the SpatialPolygon object
in R. or check out the stack overflow thread that helped us sort out how this works. &lt;a href=&quot;http://stackoverflow.com/questions/26620373/spatialpolygons-creating-a-set-of-polygons-in-r-from-coordinates&quot; target=&quot;_blank&quot;&gt;Stack Overflow Thread&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note 1: Spatial polygons require a list of lists. Each list contains the xy coordinates of each vertex in the polygon - in order. This includes the closing vertex that we discussed above. So, remember, you’ll have to repeat the first vertex coordinate.&lt;/p&gt;

&lt;p&gt;Note 2: you can grab the CRS string from another file that has CRS information already. To do this, use the syntax: proj4string =CRS(as.character(YOU-DATA-HERE@crs)). So, for example if we imported a tiff called “canopy” that was in a UTM coordinate system, we could type proj4string-CRS(as.character(canopy@crs))&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s Do this the efficient way - we will use the mapply function.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#create spatial polygons
polys &amp;lt;- SpatialPolygons(mapply(function(poly, id) {
  xy &amp;lt;- matrix(poly, ncol=2, byrow=TRUE)
  Polygons(list(Polygon(xy)), ID=id)
}, split(square, row(square)), ID),proj4string=CRS(as.character(&quot;+proj=utm +zone=11 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0&quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;If the above doesn’t make sense, let’s try to less efficient way - using a loop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The code below uses simpler R code contained within a loop. Please keep in mind that loops are less efficient to process your data. But this code might be easier for you to understand if you are newer to R.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#this is the inefficient way of doing this - using a for loop
#initialize the list
a &amp;lt;- vector(&#39;list&#39;, length(2))

#loop through each centroid value and create a polygon
for (i in 1:nrow(centroids)) {	   
  a[[i]]&amp;lt;-Polygons(list(Polygon(matrix(square[i, ], ncol=2, byrow=TRUE))), ID[i]) 
}

polys&amp;lt;-SpatialPolygons(a,proj4string=CRS(as.character(&quot;+proj=utm +zone=11 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;part-3---export-to-shapefile&quot;&gt;Part 3 - Export to Shapefile&lt;/h2&gt;
&lt;p&gt;Before you can export a shapefile, you need to convert the spatialpolygons to a spatial polygon data frame. Note: this is the step where you could add additional attribute data if you wanted to!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Create SpatialPolygonDataFrame -- this step is required to output multiple polygons.
polys.df &amp;lt;- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names=ID))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let’s check out the results before we export
	plot(polys.df, col=rainbow(50, alpha=0.5))&lt;/p&gt;

&lt;p&gt;writeOGR is a nice function as it writes not only the shapefile, but also the associated Coordinate Reference System (CRS) information IF it was identified when creating the SpatialPolygons object. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#write out the data
writeOGR(polys.df, &#39;.&#39;, &#39;sjerPlots2&#39;, &#39;ESRI Shapefile&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you have it. Bring that shapefile into QGIS or whatever GIS package you prefer and have a look! Note that you could add additional attribute data to it as well!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/working-with-field-data/Field-Data-Polygons-From-Centroids&quot;&gt;Activity: Creating A Square Buffer Around a Plot Centroid in R&lt;/a&gt; was originally published by NEON EDUCATION at &lt;a href=&quot;http://localhost:4000&quot;&gt;Work with Data - NEON Education&lt;/a&gt; on January 05, 2015.&lt;/p&gt;</content>
</entry>

</feed>
